/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Deletev1SchemasNamespaceSlugVersionSemverRequest = {
  namespace: string;
  slug: string;
  semver: string;
};

/** @internal */
export const Deletev1SchemasNamespaceSlugVersionSemverRequest$inboundSchema:
  z.ZodType<
    Deletev1SchemasNamespaceSlugVersionSemverRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    namespace: z.string(),
    slug: z.string(),
    semver: z.string(),
  });

/** @internal */
export type Deletev1SchemasNamespaceSlugVersionSemverRequest$Outbound = {
  namespace: string;
  slug: string;
  semver: string;
};

/** @internal */
export const Deletev1SchemasNamespaceSlugVersionSemverRequest$outboundSchema:
  z.ZodType<
    Deletev1SchemasNamespaceSlugVersionSemverRequest$Outbound,
    z.ZodTypeDef,
    Deletev1SchemasNamespaceSlugVersionSemverRequest
  > = z.object({
    namespace: z.string(),
    slug: z.string(),
    semver: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deletev1SchemasNamespaceSlugVersionSemverRequest$ {
  /** @deprecated use `Deletev1SchemasNamespaceSlugVersionSemverRequest$inboundSchema` instead. */
  export const inboundSchema =
    Deletev1SchemasNamespaceSlugVersionSemverRequest$inboundSchema;
  /** @deprecated use `Deletev1SchemasNamespaceSlugVersionSemverRequest$outboundSchema` instead. */
  export const outboundSchema =
    Deletev1SchemasNamespaceSlugVersionSemverRequest$outboundSchema;
  /** @deprecated use `Deletev1SchemasNamespaceSlugVersionSemverRequest$Outbound` instead. */
  export type Outbound =
    Deletev1SchemasNamespaceSlugVersionSemverRequest$Outbound;
}

export function deletev1SchemasNamespaceSlugVersionSemverRequestToJSON(
  deletev1SchemasNamespaceSlugVersionSemverRequest:
    Deletev1SchemasNamespaceSlugVersionSemverRequest,
): string {
  return JSON.stringify(
    Deletev1SchemasNamespaceSlugVersionSemverRequest$outboundSchema.parse(
      deletev1SchemasNamespaceSlugVersionSemverRequest,
    ),
  );
}

export function deletev1SchemasNamespaceSlugVersionSemverRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  Deletev1SchemasNamespaceSlugVersionSemverRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Deletev1SchemasNamespaceSlugVersionSemverRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Deletev1SchemasNamespaceSlugVersionSemverRequest' from JSON`,
  );
}
