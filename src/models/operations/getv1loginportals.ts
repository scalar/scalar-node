/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Getv1LoginPortalsResponseBody = {
  uid: string;
  title: string;
  slug: string;
};

/** @internal */
export const Getv1LoginPortalsResponseBody$inboundSchema: z.ZodType<
  Getv1LoginPortalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
  title: z.string(),
  slug: z.string(),
});

/** @internal */
export type Getv1LoginPortalsResponseBody$Outbound = {
  uid: string;
  title: string;
  slug: string;
};

/** @internal */
export const Getv1LoginPortalsResponseBody$outboundSchema: z.ZodType<
  Getv1LoginPortalsResponseBody$Outbound,
  z.ZodTypeDef,
  Getv1LoginPortalsResponseBody
> = z.object({
  uid: z.string(),
  title: z.string(),
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1LoginPortalsResponseBody$ {
  /** @deprecated use `Getv1LoginPortalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = Getv1LoginPortalsResponseBody$inboundSchema;
  /** @deprecated use `Getv1LoginPortalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = Getv1LoginPortalsResponseBody$outboundSchema;
  /** @deprecated use `Getv1LoginPortalsResponseBody$Outbound` instead. */
  export type Outbound = Getv1LoginPortalsResponseBody$Outbound;
}

export function getv1LoginPortalsResponseBodyToJSON(
  getv1LoginPortalsResponseBody: Getv1LoginPortalsResponseBody,
): string {
  return JSON.stringify(
    Getv1LoginPortalsResponseBody$outboundSchema.parse(
      getv1LoginPortalsResponseBody,
    ),
  );
}

export function getv1LoginPortalsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Getv1LoginPortalsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Getv1LoginPortalsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Getv1LoginPortalsResponseBody' from JSON`,
  );
}
