/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Getv1SchemasNamespaceRequest = {
  namespace: string;
};

export type Getv1SchemasNamespaceVersions = {
  uid?: string | undefined;
  version?: string | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
};

export type Getv1SchemasNamespaceResponseBody = {
  uid?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  slug?: string | undefined;
  namespace: string;
  isPrivate?: boolean | undefined;
  versions: Array<Getv1SchemasNamespaceVersions>;
};

/** @internal */
export const Getv1SchemasNamespaceRequest$inboundSchema: z.ZodType<
  Getv1SchemasNamespaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
});

/** @internal */
export type Getv1SchemasNamespaceRequest$Outbound = {
  namespace: string;
};

/** @internal */
export const Getv1SchemasNamespaceRequest$outboundSchema: z.ZodType<
  Getv1SchemasNamespaceRequest$Outbound,
  z.ZodTypeDef,
  Getv1SchemasNamespaceRequest
> = z.object({
  namespace: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1SchemasNamespaceRequest$ {
  /** @deprecated use `Getv1SchemasNamespaceRequest$inboundSchema` instead. */
  export const inboundSchema = Getv1SchemasNamespaceRequest$inboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceRequest$outboundSchema` instead. */
  export const outboundSchema = Getv1SchemasNamespaceRequest$outboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceRequest$Outbound` instead. */
  export type Outbound = Getv1SchemasNamespaceRequest$Outbound;
}

export function getv1SchemasNamespaceRequestToJSON(
  getv1SchemasNamespaceRequest: Getv1SchemasNamespaceRequest,
): string {
  return JSON.stringify(
    Getv1SchemasNamespaceRequest$outboundSchema.parse(
      getv1SchemasNamespaceRequest,
    ),
  );
}

export function getv1SchemasNamespaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<Getv1SchemasNamespaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Getv1SchemasNamespaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Getv1SchemasNamespaceRequest' from JSON`,
  );
}

/** @internal */
export const Getv1SchemasNamespaceVersions$inboundSchema: z.ZodType<
  Getv1SchemasNamespaceVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string().default("HbRUPunHKcEEEJyqQKK12"),
  version: z.string().default("0.0.1"),
  createdAt: z.number().default(1749789036),
  updatedAt: z.number().default(1749789036),
});

/** @internal */
export type Getv1SchemasNamespaceVersions$Outbound = {
  uid: string;
  version: string;
  createdAt: number;
  updatedAt: number;
};

/** @internal */
export const Getv1SchemasNamespaceVersions$outboundSchema: z.ZodType<
  Getv1SchemasNamespaceVersions$Outbound,
  z.ZodTypeDef,
  Getv1SchemasNamespaceVersions
> = z.object({
  uid: z.string().default("HbRUPunHKcEEEJyqQKK12"),
  version: z.string().default("0.0.1"),
  createdAt: z.number().default(1749789036),
  updatedAt: z.number().default(1749789036),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1SchemasNamespaceVersions$ {
  /** @deprecated use `Getv1SchemasNamespaceVersions$inboundSchema` instead. */
  export const inboundSchema = Getv1SchemasNamespaceVersions$inboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceVersions$outboundSchema` instead. */
  export const outboundSchema = Getv1SchemasNamespaceVersions$outboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceVersions$Outbound` instead. */
  export type Outbound = Getv1SchemasNamespaceVersions$Outbound;
}

export function getv1SchemasNamespaceVersionsToJSON(
  getv1SchemasNamespaceVersions: Getv1SchemasNamespaceVersions,
): string {
  return JSON.stringify(
    Getv1SchemasNamespaceVersions$outboundSchema.parse(
      getv1SchemasNamespaceVersions,
    ),
  );
}

export function getv1SchemasNamespaceVersionsFromJSON(
  jsonString: string,
): SafeParseResult<Getv1SchemasNamespaceVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Getv1SchemasNamespaceVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Getv1SchemasNamespaceVersions' from JSON`,
  );
}

/** @internal */
export const Getv1SchemasNamespaceResponseBody$inboundSchema: z.ZodType<
  Getv1SchemasNamespaceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string().default("EJf7mbMSAiOlgOAR6b06M"),
  title: z.string().default(""),
  description: z.string().default(""),
  slug: z.string().default("commendable-heron-wb1p68i"),
  namespace: z.string(),
  isPrivate: z.boolean().default(false),
  versions: z.array(z.lazy(() => Getv1SchemasNamespaceVersions$inboundSchema)),
});

/** @internal */
export type Getv1SchemasNamespaceResponseBody$Outbound = {
  uid: string;
  title: string;
  description: string;
  slug: string;
  namespace: string;
  isPrivate: boolean;
  versions: Array<Getv1SchemasNamespaceVersions$Outbound>;
};

/** @internal */
export const Getv1SchemasNamespaceResponseBody$outboundSchema: z.ZodType<
  Getv1SchemasNamespaceResponseBody$Outbound,
  z.ZodTypeDef,
  Getv1SchemasNamespaceResponseBody
> = z.object({
  uid: z.string().default("EJf7mbMSAiOlgOAR6b06M"),
  title: z.string().default(""),
  description: z.string().default(""),
  slug: z.string().default("commendable-heron-wb1p68i"),
  namespace: z.string(),
  isPrivate: z.boolean().default(false),
  versions: z.array(z.lazy(() => Getv1SchemasNamespaceVersions$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1SchemasNamespaceResponseBody$ {
  /** @deprecated use `Getv1SchemasNamespaceResponseBody$inboundSchema` instead. */
  export const inboundSchema = Getv1SchemasNamespaceResponseBody$inboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    Getv1SchemasNamespaceResponseBody$outboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceResponseBody$Outbound` instead. */
  export type Outbound = Getv1SchemasNamespaceResponseBody$Outbound;
}

export function getv1SchemasNamespaceResponseBodyToJSON(
  getv1SchemasNamespaceResponseBody: Getv1SchemasNamespaceResponseBody,
): string {
  return JSON.stringify(
    Getv1SchemasNamespaceResponseBody$outboundSchema.parse(
      getv1SchemasNamespaceResponseBody,
    ),
  );
}

export function getv1SchemasNamespaceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Getv1SchemasNamespaceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Getv1SchemasNamespaceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Getv1SchemasNamespaceResponseBody' from JSON`,
  );
}
