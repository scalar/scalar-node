/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Postv1SchemasNamespaceSlugAccessGroupRequestBody = {
  accessGroupSlug: string;
};

export type Postv1SchemasNamespaceSlugAccessGroupRequest = {
  namespace: string;
  slug: string;
  requestBody: Postv1SchemasNamespaceSlugAccessGroupRequestBody;
};

/** @internal */
export const Postv1SchemasNamespaceSlugAccessGroupRequestBody$inboundSchema:
  z.ZodType<
    Postv1SchemasNamespaceSlugAccessGroupRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessGroupSlug: z.string(),
  });

/** @internal */
export type Postv1SchemasNamespaceSlugAccessGroupRequestBody$Outbound = {
  accessGroupSlug: string;
};

/** @internal */
export const Postv1SchemasNamespaceSlugAccessGroupRequestBody$outboundSchema:
  z.ZodType<
    Postv1SchemasNamespaceSlugAccessGroupRequestBody$Outbound,
    z.ZodTypeDef,
    Postv1SchemasNamespaceSlugAccessGroupRequestBody
  > = z.object({
    accessGroupSlug: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1SchemasNamespaceSlugAccessGroupRequestBody$ {
  /** @deprecated use `Postv1SchemasNamespaceSlugAccessGroupRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    Postv1SchemasNamespaceSlugAccessGroupRequestBody$inboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugAccessGroupRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Postv1SchemasNamespaceSlugAccessGroupRequestBody$outboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugAccessGroupRequestBody$Outbound` instead. */
  export type Outbound =
    Postv1SchemasNamespaceSlugAccessGroupRequestBody$Outbound;
}

export function postv1SchemasNamespaceSlugAccessGroupRequestBodyToJSON(
  postv1SchemasNamespaceSlugAccessGroupRequestBody:
    Postv1SchemasNamespaceSlugAccessGroupRequestBody,
): string {
  return JSON.stringify(
    Postv1SchemasNamespaceSlugAccessGroupRequestBody$outboundSchema.parse(
      postv1SchemasNamespaceSlugAccessGroupRequestBody,
    ),
  );
}

export function postv1SchemasNamespaceSlugAccessGroupRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  Postv1SchemasNamespaceSlugAccessGroupRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1SchemasNamespaceSlugAccessGroupRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Postv1SchemasNamespaceSlugAccessGroupRequestBody' from JSON`,
  );
}

/** @internal */
export const Postv1SchemasNamespaceSlugAccessGroupRequest$inboundSchema:
  z.ZodType<
    Postv1SchemasNamespaceSlugAccessGroupRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    namespace: z.string(),
    slug: z.string(),
    RequestBody: z.lazy(() =>
      Postv1SchemasNamespaceSlugAccessGroupRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type Postv1SchemasNamespaceSlugAccessGroupRequest$Outbound = {
  namespace: string;
  slug: string;
  RequestBody: Postv1SchemasNamespaceSlugAccessGroupRequestBody$Outbound;
};

/** @internal */
export const Postv1SchemasNamespaceSlugAccessGroupRequest$outboundSchema:
  z.ZodType<
    Postv1SchemasNamespaceSlugAccessGroupRequest$Outbound,
    z.ZodTypeDef,
    Postv1SchemasNamespaceSlugAccessGroupRequest
  > = z.object({
    namespace: z.string(),
    slug: z.string(),
    requestBody: z.lazy(() =>
      Postv1SchemasNamespaceSlugAccessGroupRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1SchemasNamespaceSlugAccessGroupRequest$ {
  /** @deprecated use `Postv1SchemasNamespaceSlugAccessGroupRequest$inboundSchema` instead. */
  export const inboundSchema =
    Postv1SchemasNamespaceSlugAccessGroupRequest$inboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugAccessGroupRequest$outboundSchema` instead. */
  export const outboundSchema =
    Postv1SchemasNamespaceSlugAccessGroupRequest$outboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugAccessGroupRequest$Outbound` instead. */
  export type Outbound = Postv1SchemasNamespaceSlugAccessGroupRequest$Outbound;
}

export function postv1SchemasNamespaceSlugAccessGroupRequestToJSON(
  postv1SchemasNamespaceSlugAccessGroupRequest:
    Postv1SchemasNamespaceSlugAccessGroupRequest,
): string {
  return JSON.stringify(
    Postv1SchemasNamespaceSlugAccessGroupRequest$outboundSchema.parse(
      postv1SchemasNamespaceSlugAccessGroupRequest,
    ),
  );
}

export function postv1SchemasNamespaceSlugAccessGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  Postv1SchemasNamespaceSlugAccessGroupRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1SchemasNamespaceSlugAccessGroupRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Postv1SchemasNamespaceSlugAccessGroupRequest' from JSON`,
  );
}
