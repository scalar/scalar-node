/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Patchv1SchemasNamespaceSlugRequestBody = {
  title?: string | undefined;
  description?: string | undefined;
  isPrivate?: boolean | undefined;
};

export type Patchv1SchemasNamespaceSlugRequest = {
  namespace: string;
  slug: string;
  requestBody: Patchv1SchemasNamespaceSlugRequestBody;
};

/** @internal */
export const Patchv1SchemasNamespaceSlugRequestBody$inboundSchema: z.ZodType<
  Patchv1SchemasNamespaceSlugRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  isPrivate: z.boolean().optional(),
});

/** @internal */
export type Patchv1SchemasNamespaceSlugRequestBody$Outbound = {
  title?: string | undefined;
  description?: string | undefined;
  isPrivate?: boolean | undefined;
};

/** @internal */
export const Patchv1SchemasNamespaceSlugRequestBody$outboundSchema: z.ZodType<
  Patchv1SchemasNamespaceSlugRequestBody$Outbound,
  z.ZodTypeDef,
  Patchv1SchemasNamespaceSlugRequestBody
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  isPrivate: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Patchv1SchemasNamespaceSlugRequestBody$ {
  /** @deprecated use `Patchv1SchemasNamespaceSlugRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    Patchv1SchemasNamespaceSlugRequestBody$inboundSchema;
  /** @deprecated use `Patchv1SchemasNamespaceSlugRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Patchv1SchemasNamespaceSlugRequestBody$outboundSchema;
  /** @deprecated use `Patchv1SchemasNamespaceSlugRequestBody$Outbound` instead. */
  export type Outbound = Patchv1SchemasNamespaceSlugRequestBody$Outbound;
}

export function patchv1SchemasNamespaceSlugRequestBodyToJSON(
  patchv1SchemasNamespaceSlugRequestBody:
    Patchv1SchemasNamespaceSlugRequestBody,
): string {
  return JSON.stringify(
    Patchv1SchemasNamespaceSlugRequestBody$outboundSchema.parse(
      patchv1SchemasNamespaceSlugRequestBody,
    ),
  );
}

export function patchv1SchemasNamespaceSlugRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Patchv1SchemasNamespaceSlugRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Patchv1SchemasNamespaceSlugRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Patchv1SchemasNamespaceSlugRequestBody' from JSON`,
  );
}

/** @internal */
export const Patchv1SchemasNamespaceSlugRequest$inboundSchema: z.ZodType<
  Patchv1SchemasNamespaceSlugRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  RequestBody: z.lazy(() =>
    Patchv1SchemasNamespaceSlugRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type Patchv1SchemasNamespaceSlugRequest$Outbound = {
  namespace: string;
  slug: string;
  RequestBody: Patchv1SchemasNamespaceSlugRequestBody$Outbound;
};

/** @internal */
export const Patchv1SchemasNamespaceSlugRequest$outboundSchema: z.ZodType<
  Patchv1SchemasNamespaceSlugRequest$Outbound,
  z.ZodTypeDef,
  Patchv1SchemasNamespaceSlugRequest
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  requestBody: z.lazy(() =>
    Patchv1SchemasNamespaceSlugRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Patchv1SchemasNamespaceSlugRequest$ {
  /** @deprecated use `Patchv1SchemasNamespaceSlugRequest$inboundSchema` instead. */
  export const inboundSchema = Patchv1SchemasNamespaceSlugRequest$inboundSchema;
  /** @deprecated use `Patchv1SchemasNamespaceSlugRequest$outboundSchema` instead. */
  export const outboundSchema =
    Patchv1SchemasNamespaceSlugRequest$outboundSchema;
  /** @deprecated use `Patchv1SchemasNamespaceSlugRequest$Outbound` instead. */
  export type Outbound = Patchv1SchemasNamespaceSlugRequest$Outbound;
}

export function patchv1SchemasNamespaceSlugRequestToJSON(
  patchv1SchemasNamespaceSlugRequest: Patchv1SchemasNamespaceSlugRequest,
): string {
  return JSON.stringify(
    Patchv1SchemasNamespaceSlugRequest$outboundSchema.parse(
      patchv1SchemasNamespaceSlugRequest,
    ),
  );
}

export function patchv1SchemasNamespaceSlugRequestFromJSON(
  jsonString: string,
): SafeParseResult<Patchv1SchemasNamespaceSlugRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Patchv1SchemasNamespaceSlugRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Patchv1SchemasNamespaceSlugRequest' from JSON`,
  );
}
