/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Getv1ApisNamespaceRequest = {
  namespace: string;
};

export const EmbedStatus = {
  Complete: "complete",
  Failed: "failed",
} as const;
export type EmbedStatus = ClosedEnum<typeof EmbedStatus>;

export type Versions = {
  uid: string;
  createdAt: number;
  version: string;
  upgraded?: boolean | undefined;
  embedStatus?: EmbedStatus | null | undefined;
  tags?: Array<string> | undefined;
};

export type ResponseBody = {
  uid?: string | undefined;
  version: string;
  title?: string | undefined;
  slug?: string | undefined;
  description?: string | undefined;
  namespace: string;
  isPrivate?: boolean | undefined;
  tags?: Array<string> | undefined;
  versions: Array<Versions>;
};

/** @internal */
export const Getv1ApisNamespaceRequest$inboundSchema: z.ZodType<
  Getv1ApisNamespaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
});

/** @internal */
export type Getv1ApisNamespaceRequest$Outbound = {
  namespace: string;
};

/** @internal */
export const Getv1ApisNamespaceRequest$outboundSchema: z.ZodType<
  Getv1ApisNamespaceRequest$Outbound,
  z.ZodTypeDef,
  Getv1ApisNamespaceRequest
> = z.object({
  namespace: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1ApisNamespaceRequest$ {
  /** @deprecated use `Getv1ApisNamespaceRequest$inboundSchema` instead. */
  export const inboundSchema = Getv1ApisNamespaceRequest$inboundSchema;
  /** @deprecated use `Getv1ApisNamespaceRequest$outboundSchema` instead. */
  export const outboundSchema = Getv1ApisNamespaceRequest$outboundSchema;
  /** @deprecated use `Getv1ApisNamespaceRequest$Outbound` instead. */
  export type Outbound = Getv1ApisNamespaceRequest$Outbound;
}

export function getv1ApisNamespaceRequestToJSON(
  getv1ApisNamespaceRequest: Getv1ApisNamespaceRequest,
): string {
  return JSON.stringify(
    Getv1ApisNamespaceRequest$outboundSchema.parse(getv1ApisNamespaceRequest),
  );
}

export function getv1ApisNamespaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<Getv1ApisNamespaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Getv1ApisNamespaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Getv1ApisNamespaceRequest' from JSON`,
  );
}

/** @internal */
export const EmbedStatus$inboundSchema: z.ZodNativeEnum<typeof EmbedStatus> = z
  .nativeEnum(EmbedStatus);

/** @internal */
export const EmbedStatus$outboundSchema: z.ZodNativeEnum<typeof EmbedStatus> =
  EmbedStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbedStatus$ {
  /** @deprecated use `EmbedStatus$inboundSchema` instead. */
  export const inboundSchema = EmbedStatus$inboundSchema;
  /** @deprecated use `EmbedStatus$outboundSchema` instead. */
  export const outboundSchema = EmbedStatus$outboundSchema;
}

/** @internal */
export const Versions$inboundSchema: z.ZodType<
  Versions,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
  createdAt: z.number(),
  version: z.string(),
  upgraded: z.boolean().default(false),
  embedStatus: z.nullable(EmbedStatus$inboundSchema).optional(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type Versions$Outbound = {
  uid: string;
  createdAt: number;
  version: string;
  upgraded: boolean;
  embedStatus?: string | null | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const Versions$outboundSchema: z.ZodType<
  Versions$Outbound,
  z.ZodTypeDef,
  Versions
> = z.object({
  uid: z.string(),
  createdAt: z.number(),
  version: z.string(),
  upgraded: z.boolean().default(false),
  embedStatus: z.nullable(EmbedStatus$outboundSchema).optional(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Versions$ {
  /** @deprecated use `Versions$inboundSchema` instead. */
  export const inboundSchema = Versions$inboundSchema;
  /** @deprecated use `Versions$outboundSchema` instead. */
  export const outboundSchema = Versions$outboundSchema;
  /** @deprecated use `Versions$Outbound` instead. */
  export type Outbound = Versions$Outbound;
}

export function versionsToJSON(versions: Versions): string {
  return JSON.stringify(Versions$outboundSchema.parse(versions));
}

export function versionsFromJSON(
  jsonString: string,
): SafeParseResult<Versions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Versions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Versions' from JSON`,
  );
}

/** @internal */
export const ResponseBody$inboundSchema: z.ZodType<
  ResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string().default("CiyS1tx4Woh7xpHKxsUiL"),
  version: z.string(),
  title: z.string().default(""),
  slug: z.string().default("felicitous-crystal-ctkqos6"),
  description: z.string().default(""),
  namespace: z.string(),
  isPrivate: z.boolean().default(false),
  tags: z.array(z.string()).optional(),
  versions: z.array(z.lazy(() => Versions$inboundSchema)),
});

/** @internal */
export type ResponseBody$Outbound = {
  uid: string;
  version: string;
  title: string;
  slug: string;
  description: string;
  namespace: string;
  isPrivate: boolean;
  tags?: Array<string> | undefined;
  versions: Array<Versions$Outbound>;
};

/** @internal */
export const ResponseBody$outboundSchema: z.ZodType<
  ResponseBody$Outbound,
  z.ZodTypeDef,
  ResponseBody
> = z.object({
  uid: z.string().default("CiyS1tx4Woh7xpHKxsUiL"),
  version: z.string(),
  title: z.string().default(""),
  slug: z.string().default("felicitous-crystal-ctkqos6"),
  description: z.string().default(""),
  namespace: z.string(),
  isPrivate: z.boolean().default(false),
  tags: z.array(z.string()).optional(),
  versions: z.array(z.lazy(() => Versions$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody$ {
  /** @deprecated use `ResponseBody$inboundSchema` instead. */
  export const inboundSchema = ResponseBody$inboundSchema;
  /** @deprecated use `ResponseBody$outboundSchema` instead. */
  export const outboundSchema = ResponseBody$outboundSchema;
  /** @deprecated use `ResponseBody$Outbound` instead. */
  export type Outbound = ResponseBody$Outbound;
}

export function responseBodyToJSON(responseBody: ResponseBody): string {
  return JSON.stringify(ResponseBody$outboundSchema.parse(responseBody));
}

export function responseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody' from JSON`,
  );
}
