/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Getv1RulesetsNamespaceRequest = {
  namespace: string;
};

export type Getv1RulesetsNamespaceResponseBody = {
  uid?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  slug?: string | undefined;
  namespace: string;
  isPrivate?: boolean | undefined;
};

/** @internal */
export const Getv1RulesetsNamespaceRequest$inboundSchema: z.ZodType<
  Getv1RulesetsNamespaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
});

/** @internal */
export type Getv1RulesetsNamespaceRequest$Outbound = {
  namespace: string;
};

/** @internal */
export const Getv1RulesetsNamespaceRequest$outboundSchema: z.ZodType<
  Getv1RulesetsNamespaceRequest$Outbound,
  z.ZodTypeDef,
  Getv1RulesetsNamespaceRequest
> = z.object({
  namespace: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1RulesetsNamespaceRequest$ {
  /** @deprecated use `Getv1RulesetsNamespaceRequest$inboundSchema` instead. */
  export const inboundSchema = Getv1RulesetsNamespaceRequest$inboundSchema;
  /** @deprecated use `Getv1RulesetsNamespaceRequest$outboundSchema` instead. */
  export const outboundSchema = Getv1RulesetsNamespaceRequest$outboundSchema;
  /** @deprecated use `Getv1RulesetsNamespaceRequest$Outbound` instead. */
  export type Outbound = Getv1RulesetsNamespaceRequest$Outbound;
}

export function getv1RulesetsNamespaceRequestToJSON(
  getv1RulesetsNamespaceRequest: Getv1RulesetsNamespaceRequest,
): string {
  return JSON.stringify(
    Getv1RulesetsNamespaceRequest$outboundSchema.parse(
      getv1RulesetsNamespaceRequest,
    ),
  );
}

export function getv1RulesetsNamespaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<Getv1RulesetsNamespaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Getv1RulesetsNamespaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Getv1RulesetsNamespaceRequest' from JSON`,
  );
}

/** @internal */
export const Getv1RulesetsNamespaceResponseBody$inboundSchema: z.ZodType<
  Getv1RulesetsNamespaceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string().default("a4O07DTYy35wPEJBedtFC"),
  title: z.string().default(""),
  description: z.string().default(""),
  slug: z.string().default("cheerful-structure-4r3xs45"),
  namespace: z.string(),
  isPrivate: z.boolean().default(false),
});

/** @internal */
export type Getv1RulesetsNamespaceResponseBody$Outbound = {
  uid: string;
  title: string;
  description: string;
  slug: string;
  namespace: string;
  isPrivate: boolean;
};

/** @internal */
export const Getv1RulesetsNamespaceResponseBody$outboundSchema: z.ZodType<
  Getv1RulesetsNamespaceResponseBody$Outbound,
  z.ZodTypeDef,
  Getv1RulesetsNamespaceResponseBody
> = z.object({
  uid: z.string().default("a4O07DTYy35wPEJBedtFC"),
  title: z.string().default(""),
  description: z.string().default(""),
  slug: z.string().default("cheerful-structure-4r3xs45"),
  namespace: z.string(),
  isPrivate: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1RulesetsNamespaceResponseBody$ {
  /** @deprecated use `Getv1RulesetsNamespaceResponseBody$inboundSchema` instead. */
  export const inboundSchema = Getv1RulesetsNamespaceResponseBody$inboundSchema;
  /** @deprecated use `Getv1RulesetsNamespaceResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    Getv1RulesetsNamespaceResponseBody$outboundSchema;
  /** @deprecated use `Getv1RulesetsNamespaceResponseBody$Outbound` instead. */
  export type Outbound = Getv1RulesetsNamespaceResponseBody$Outbound;
}

export function getv1RulesetsNamespaceResponseBodyToJSON(
  getv1RulesetsNamespaceResponseBody: Getv1RulesetsNamespaceResponseBody,
): string {
  return JSON.stringify(
    Getv1RulesetsNamespaceResponseBody$outboundSchema.parse(
      getv1RulesetsNamespaceResponseBody,
    ),
  );
}

export function getv1RulesetsNamespaceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Getv1RulesetsNamespaceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Getv1RulesetsNamespaceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Getv1RulesetsNamespaceResponseBody' from JSON`,
  );
}
