/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Getv1SchemasNamespaceSlugVersionSemverRequest = {
  namespace: string;
  slug: string;
  semver: string;
};

/**
 * Default Response
 */
export type Getv1SchemasNamespaceSlugVersionSemverResponseBody = {};

/** @internal */
export const Getv1SchemasNamespaceSlugVersionSemverRequest$inboundSchema:
  z.ZodType<
    Getv1SchemasNamespaceSlugVersionSemverRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    namespace: z.string(),
    slug: z.string(),
    semver: z.string(),
  });

/** @internal */
export type Getv1SchemasNamespaceSlugVersionSemverRequest$Outbound = {
  namespace: string;
  slug: string;
  semver: string;
};

/** @internal */
export const Getv1SchemasNamespaceSlugVersionSemverRequest$outboundSchema:
  z.ZodType<
    Getv1SchemasNamespaceSlugVersionSemverRequest$Outbound,
    z.ZodTypeDef,
    Getv1SchemasNamespaceSlugVersionSemverRequest
  > = z.object({
    namespace: z.string(),
    slug: z.string(),
    semver: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1SchemasNamespaceSlugVersionSemverRequest$ {
  /** @deprecated use `Getv1SchemasNamespaceSlugVersionSemverRequest$inboundSchema` instead. */
  export const inboundSchema =
    Getv1SchemasNamespaceSlugVersionSemverRequest$inboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceSlugVersionSemverRequest$outboundSchema` instead. */
  export const outboundSchema =
    Getv1SchemasNamespaceSlugVersionSemverRequest$outboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceSlugVersionSemverRequest$Outbound` instead. */
  export type Outbound = Getv1SchemasNamespaceSlugVersionSemverRequest$Outbound;
}

export function getv1SchemasNamespaceSlugVersionSemverRequestToJSON(
  getv1SchemasNamespaceSlugVersionSemverRequest:
    Getv1SchemasNamespaceSlugVersionSemverRequest,
): string {
  return JSON.stringify(
    Getv1SchemasNamespaceSlugVersionSemverRequest$outboundSchema.parse(
      getv1SchemasNamespaceSlugVersionSemverRequest,
    ),
  );
}

export function getv1SchemasNamespaceSlugVersionSemverRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  Getv1SchemasNamespaceSlugVersionSemverRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Getv1SchemasNamespaceSlugVersionSemverRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Getv1SchemasNamespaceSlugVersionSemverRequest' from JSON`,
  );
}

/** @internal */
export const Getv1SchemasNamespaceSlugVersionSemverResponseBody$inboundSchema:
  z.ZodType<
    Getv1SchemasNamespaceSlugVersionSemverResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type Getv1SchemasNamespaceSlugVersionSemverResponseBody$Outbound = {};

/** @internal */
export const Getv1SchemasNamespaceSlugVersionSemverResponseBody$outboundSchema:
  z.ZodType<
    Getv1SchemasNamespaceSlugVersionSemverResponseBody$Outbound,
    z.ZodTypeDef,
    Getv1SchemasNamespaceSlugVersionSemverResponseBody
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1SchemasNamespaceSlugVersionSemverResponseBody$ {
  /** @deprecated use `Getv1SchemasNamespaceSlugVersionSemverResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    Getv1SchemasNamespaceSlugVersionSemverResponseBody$inboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceSlugVersionSemverResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    Getv1SchemasNamespaceSlugVersionSemverResponseBody$outboundSchema;
  /** @deprecated use `Getv1SchemasNamespaceSlugVersionSemverResponseBody$Outbound` instead. */
  export type Outbound =
    Getv1SchemasNamespaceSlugVersionSemverResponseBody$Outbound;
}

export function getv1SchemasNamespaceSlugVersionSemverResponseBodyToJSON(
  getv1SchemasNamespaceSlugVersionSemverResponseBody:
    Getv1SchemasNamespaceSlugVersionSemverResponseBody,
): string {
  return JSON.stringify(
    Getv1SchemasNamespaceSlugVersionSemverResponseBody$outboundSchema.parse(
      getv1SchemasNamespaceSlugVersionSemverResponseBody,
    ),
  );
}

export function getv1SchemasNamespaceSlugVersionSemverResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  Getv1SchemasNamespaceSlugVersionSemverResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Getv1SchemasNamespaceSlugVersionSemverResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Getv1SchemasNamespaceSlugVersionSemverResponseBody' from JSON`,
  );
}
