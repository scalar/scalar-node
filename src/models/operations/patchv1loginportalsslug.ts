/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Patchv1LoginPortalsSlugRequestBody = {
  title?: string | undefined;
};

export type Patchv1LoginPortalsSlugRequest = {
  slug: string;
  requestBody: Patchv1LoginPortalsSlugRequestBody;
};

/** @internal */
export const Patchv1LoginPortalsSlugRequestBody$inboundSchema: z.ZodType<
  Patchv1LoginPortalsSlugRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
});

/** @internal */
export type Patchv1LoginPortalsSlugRequestBody$Outbound = {
  title?: string | undefined;
};

/** @internal */
export const Patchv1LoginPortalsSlugRequestBody$outboundSchema: z.ZodType<
  Patchv1LoginPortalsSlugRequestBody$Outbound,
  z.ZodTypeDef,
  Patchv1LoginPortalsSlugRequestBody
> = z.object({
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Patchv1LoginPortalsSlugRequestBody$ {
  /** @deprecated use `Patchv1LoginPortalsSlugRequestBody$inboundSchema` instead. */
  export const inboundSchema = Patchv1LoginPortalsSlugRequestBody$inboundSchema;
  /** @deprecated use `Patchv1LoginPortalsSlugRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Patchv1LoginPortalsSlugRequestBody$outboundSchema;
  /** @deprecated use `Patchv1LoginPortalsSlugRequestBody$Outbound` instead. */
  export type Outbound = Patchv1LoginPortalsSlugRequestBody$Outbound;
}

export function patchv1LoginPortalsSlugRequestBodyToJSON(
  patchv1LoginPortalsSlugRequestBody: Patchv1LoginPortalsSlugRequestBody,
): string {
  return JSON.stringify(
    Patchv1LoginPortalsSlugRequestBody$outboundSchema.parse(
      patchv1LoginPortalsSlugRequestBody,
    ),
  );
}

export function patchv1LoginPortalsSlugRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Patchv1LoginPortalsSlugRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Patchv1LoginPortalsSlugRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Patchv1LoginPortalsSlugRequestBody' from JSON`,
  );
}

/** @internal */
export const Patchv1LoginPortalsSlugRequest$inboundSchema: z.ZodType<
  Patchv1LoginPortalsSlugRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  slug: z.string(),
  RequestBody: z.lazy(() => Patchv1LoginPortalsSlugRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type Patchv1LoginPortalsSlugRequest$Outbound = {
  slug: string;
  RequestBody: Patchv1LoginPortalsSlugRequestBody$Outbound;
};

/** @internal */
export const Patchv1LoginPortalsSlugRequest$outboundSchema: z.ZodType<
  Patchv1LoginPortalsSlugRequest$Outbound,
  z.ZodTypeDef,
  Patchv1LoginPortalsSlugRequest
> = z.object({
  slug: z.string(),
  requestBody: z.lazy(() => Patchv1LoginPortalsSlugRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Patchv1LoginPortalsSlugRequest$ {
  /** @deprecated use `Patchv1LoginPortalsSlugRequest$inboundSchema` instead. */
  export const inboundSchema = Patchv1LoginPortalsSlugRequest$inboundSchema;
  /** @deprecated use `Patchv1LoginPortalsSlugRequest$outboundSchema` instead. */
  export const outboundSchema = Patchv1LoginPortalsSlugRequest$outboundSchema;
  /** @deprecated use `Patchv1LoginPortalsSlugRequest$Outbound` instead. */
  export type Outbound = Patchv1LoginPortalsSlugRequest$Outbound;
}

export function patchv1LoginPortalsSlugRequestToJSON(
  patchv1LoginPortalsSlugRequest: Patchv1LoginPortalsSlugRequest,
): string {
  return JSON.stringify(
    Patchv1LoginPortalsSlugRequest$outboundSchema.parse(
      patchv1LoginPortalsSlugRequest,
    ),
  );
}

export function patchv1LoginPortalsSlugRequestFromJSON(
  jsonString: string,
): SafeParseResult<Patchv1LoginPortalsSlugRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Patchv1LoginPortalsSlugRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Patchv1LoginPortalsSlugRequest' from JSON`,
  );
}
