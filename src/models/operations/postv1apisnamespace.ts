/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Postv1ApisNamespaceRequestBody = {
  title: string;
  description?: string | undefined;
  version: string;
  slug: string;
  ruleset?: string | undefined;
  isPrivate?: boolean | undefined;
  document: string;
};

export type Postv1ApisNamespaceRequest = {
  namespace: string;
  requestBody: Postv1ApisNamespaceRequestBody;
};

/**
 * Default Response
 */
export type Postv1ApisNamespaceResponseBody = {
  uid: string;
};

/** @internal */
export const Postv1ApisNamespaceRequestBody$inboundSchema: z.ZodType<
  Postv1ApisNamespaceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  description: z.string().optional(),
  version: z.string(),
  slug: z.string(),
  ruleset: z.string().optional(),
  isPrivate: z.boolean().optional(),
  document: z.string(),
});

/** @internal */
export type Postv1ApisNamespaceRequestBody$Outbound = {
  title: string;
  description?: string | undefined;
  version: string;
  slug: string;
  ruleset?: string | undefined;
  isPrivate?: boolean | undefined;
  document: string;
};

/** @internal */
export const Postv1ApisNamespaceRequestBody$outboundSchema: z.ZodType<
  Postv1ApisNamespaceRequestBody$Outbound,
  z.ZodTypeDef,
  Postv1ApisNamespaceRequestBody
> = z.object({
  title: z.string(),
  description: z.string().optional(),
  version: z.string(),
  slug: z.string(),
  ruleset: z.string().optional(),
  isPrivate: z.boolean().optional(),
  document: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1ApisNamespaceRequestBody$ {
  /** @deprecated use `Postv1ApisNamespaceRequestBody$inboundSchema` instead. */
  export const inboundSchema = Postv1ApisNamespaceRequestBody$inboundSchema;
  /** @deprecated use `Postv1ApisNamespaceRequestBody$outboundSchema` instead. */
  export const outboundSchema = Postv1ApisNamespaceRequestBody$outboundSchema;
  /** @deprecated use `Postv1ApisNamespaceRequestBody$Outbound` instead. */
  export type Outbound = Postv1ApisNamespaceRequestBody$Outbound;
}

export function postv1ApisNamespaceRequestBodyToJSON(
  postv1ApisNamespaceRequestBody: Postv1ApisNamespaceRequestBody,
): string {
  return JSON.stringify(
    Postv1ApisNamespaceRequestBody$outboundSchema.parse(
      postv1ApisNamespaceRequestBody,
    ),
  );
}

export function postv1ApisNamespaceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1ApisNamespaceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1ApisNamespaceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1ApisNamespaceRequestBody' from JSON`,
  );
}

/** @internal */
export const Postv1ApisNamespaceRequest$inboundSchema: z.ZodType<
  Postv1ApisNamespaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  RequestBody: z.lazy(() => Postv1ApisNamespaceRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type Postv1ApisNamespaceRequest$Outbound = {
  namespace: string;
  RequestBody: Postv1ApisNamespaceRequestBody$Outbound;
};

/** @internal */
export const Postv1ApisNamespaceRequest$outboundSchema: z.ZodType<
  Postv1ApisNamespaceRequest$Outbound,
  z.ZodTypeDef,
  Postv1ApisNamespaceRequest
> = z.object({
  namespace: z.string(),
  requestBody: z.lazy(() => Postv1ApisNamespaceRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1ApisNamespaceRequest$ {
  /** @deprecated use `Postv1ApisNamespaceRequest$inboundSchema` instead. */
  export const inboundSchema = Postv1ApisNamespaceRequest$inboundSchema;
  /** @deprecated use `Postv1ApisNamespaceRequest$outboundSchema` instead. */
  export const outboundSchema = Postv1ApisNamespaceRequest$outboundSchema;
  /** @deprecated use `Postv1ApisNamespaceRequest$Outbound` instead. */
  export type Outbound = Postv1ApisNamespaceRequest$Outbound;
}

export function postv1ApisNamespaceRequestToJSON(
  postv1ApisNamespaceRequest: Postv1ApisNamespaceRequest,
): string {
  return JSON.stringify(
    Postv1ApisNamespaceRequest$outboundSchema.parse(postv1ApisNamespaceRequest),
  );
}

export function postv1ApisNamespaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<Postv1ApisNamespaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1ApisNamespaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1ApisNamespaceRequest' from JSON`,
  );
}

/** @internal */
export const Postv1ApisNamespaceResponseBody$inboundSchema: z.ZodType<
  Postv1ApisNamespaceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
});

/** @internal */
export type Postv1ApisNamespaceResponseBody$Outbound = {
  uid: string;
};

/** @internal */
export const Postv1ApisNamespaceResponseBody$outboundSchema: z.ZodType<
  Postv1ApisNamespaceResponseBody$Outbound,
  z.ZodTypeDef,
  Postv1ApisNamespaceResponseBody
> = z.object({
  uid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1ApisNamespaceResponseBody$ {
  /** @deprecated use `Postv1ApisNamespaceResponseBody$inboundSchema` instead. */
  export const inboundSchema = Postv1ApisNamespaceResponseBody$inboundSchema;
  /** @deprecated use `Postv1ApisNamespaceResponseBody$outboundSchema` instead. */
  export const outboundSchema = Postv1ApisNamespaceResponseBody$outboundSchema;
  /** @deprecated use `Postv1ApisNamespaceResponseBody$Outbound` instead. */
  export type Outbound = Postv1ApisNamespaceResponseBody$Outbound;
}

export function postv1ApisNamespaceResponseBodyToJSON(
  postv1ApisNamespaceResponseBody: Postv1ApisNamespaceResponseBody,
): string {
  return JSON.stringify(
    Postv1ApisNamespaceResponseBody$outboundSchema.parse(
      postv1ApisNamespaceResponseBody,
    ),
  );
}

export function postv1ApisNamespaceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1ApisNamespaceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1ApisNamespaceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1ApisNamespaceResponseBody' from JSON`,
  );
}
