/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Deletev1RulesetsNamespaceSlugRequest = {
  namespace: string;
  slug: string;
};

/** @internal */
export const Deletev1RulesetsNamespaceSlugRequest$inboundSchema: z.ZodType<
  Deletev1RulesetsNamespaceSlugRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  slug: z.string(),
});

/** @internal */
export type Deletev1RulesetsNamespaceSlugRequest$Outbound = {
  namespace: string;
  slug: string;
};

/** @internal */
export const Deletev1RulesetsNamespaceSlugRequest$outboundSchema: z.ZodType<
  Deletev1RulesetsNamespaceSlugRequest$Outbound,
  z.ZodTypeDef,
  Deletev1RulesetsNamespaceSlugRequest
> = z.object({
  namespace: z.string(),
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deletev1RulesetsNamespaceSlugRequest$ {
  /** @deprecated use `Deletev1RulesetsNamespaceSlugRequest$inboundSchema` instead. */
  export const inboundSchema =
    Deletev1RulesetsNamespaceSlugRequest$inboundSchema;
  /** @deprecated use `Deletev1RulesetsNamespaceSlugRequest$outboundSchema` instead. */
  export const outboundSchema =
    Deletev1RulesetsNamespaceSlugRequest$outboundSchema;
  /** @deprecated use `Deletev1RulesetsNamespaceSlugRequest$Outbound` instead. */
  export type Outbound = Deletev1RulesetsNamespaceSlugRequest$Outbound;
}

export function deletev1RulesetsNamespaceSlugRequestToJSON(
  deletev1RulesetsNamespaceSlugRequest: Deletev1RulesetsNamespaceSlugRequest,
): string {
  return JSON.stringify(
    Deletev1RulesetsNamespaceSlugRequest$outboundSchema.parse(
      deletev1RulesetsNamespaceSlugRequest,
    ),
  );
}

export function deletev1RulesetsNamespaceSlugRequestFromJSON(
  jsonString: string,
): SafeParseResult<Deletev1RulesetsNamespaceSlugRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Deletev1RulesetsNamespaceSlugRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deletev1RulesetsNamespaceSlugRequest' from JSON`,
  );
}
