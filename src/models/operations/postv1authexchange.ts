/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Postv1AuthExchangeRequestBody = {
  personalToken: string;
};

/**
 * Default Response
 */
export type Postv1AuthExchangeResponseBody = {
  accessToken: string;
};

/** @internal */
export const Postv1AuthExchangeRequestBody$inboundSchema: z.ZodType<
  Postv1AuthExchangeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  personalToken: z.string(),
});

/** @internal */
export type Postv1AuthExchangeRequestBody$Outbound = {
  personalToken: string;
};

/** @internal */
export const Postv1AuthExchangeRequestBody$outboundSchema: z.ZodType<
  Postv1AuthExchangeRequestBody$Outbound,
  z.ZodTypeDef,
  Postv1AuthExchangeRequestBody
> = z.object({
  personalToken: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1AuthExchangeRequestBody$ {
  /** @deprecated use `Postv1AuthExchangeRequestBody$inboundSchema` instead. */
  export const inboundSchema = Postv1AuthExchangeRequestBody$inboundSchema;
  /** @deprecated use `Postv1AuthExchangeRequestBody$outboundSchema` instead. */
  export const outboundSchema = Postv1AuthExchangeRequestBody$outboundSchema;
  /** @deprecated use `Postv1AuthExchangeRequestBody$Outbound` instead. */
  export type Outbound = Postv1AuthExchangeRequestBody$Outbound;
}

export function postv1AuthExchangeRequestBodyToJSON(
  postv1AuthExchangeRequestBody: Postv1AuthExchangeRequestBody,
): string {
  return JSON.stringify(
    Postv1AuthExchangeRequestBody$outboundSchema.parse(
      postv1AuthExchangeRequestBody,
    ),
  );
}

export function postv1AuthExchangeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1AuthExchangeRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1AuthExchangeRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1AuthExchangeRequestBody' from JSON`,
  );
}

/** @internal */
export const Postv1AuthExchangeResponseBody$inboundSchema: z.ZodType<
  Postv1AuthExchangeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessToken: z.string(),
});

/** @internal */
export type Postv1AuthExchangeResponseBody$Outbound = {
  accessToken: string;
};

/** @internal */
export const Postv1AuthExchangeResponseBody$outboundSchema: z.ZodType<
  Postv1AuthExchangeResponseBody$Outbound,
  z.ZodTypeDef,
  Postv1AuthExchangeResponseBody
> = z.object({
  accessToken: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1AuthExchangeResponseBody$ {
  /** @deprecated use `Postv1AuthExchangeResponseBody$inboundSchema` instead. */
  export const inboundSchema = Postv1AuthExchangeResponseBody$inboundSchema;
  /** @deprecated use `Postv1AuthExchangeResponseBody$outboundSchema` instead. */
  export const outboundSchema = Postv1AuthExchangeResponseBody$outboundSchema;
  /** @deprecated use `Postv1AuthExchangeResponseBody$Outbound` instead. */
  export type Outbound = Postv1AuthExchangeResponseBody$Outbound;
}

export function postv1AuthExchangeResponseBodyToJSON(
  postv1AuthExchangeResponseBody: Postv1AuthExchangeResponseBody,
): string {
  return JSON.stringify(
    Postv1AuthExchangeResponseBody$outboundSchema.parse(
      postv1AuthExchangeResponseBody,
    ),
  );
}

export function postv1AuthExchangeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1AuthExchangeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1AuthExchangeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1AuthExchangeResponseBody' from JSON`,
  );
}
