/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Postv1GuidesRequestBody = {
  name: string;
  slug?: string | undefined;
  isPrivate?: boolean | undefined;
  allowedUsers?: Array<string> | undefined;
  allowedDomains?: Array<string> | undefined;
};

/**
 * Default Response
 */
export type Postv1GuidesResponseBody = {
  uid: string;
  slug: string;
};

/** @internal */
export const Postv1GuidesRequestBody$inboundSchema: z.ZodType<
  Postv1GuidesRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  slug: z.string().optional(),
  isPrivate: z.boolean().default(false),
  allowedUsers: z.array(z.string()).optional(),
  allowedDomains: z.array(z.string()).optional(),
});

/** @internal */
export type Postv1GuidesRequestBody$Outbound = {
  name: string;
  slug?: string | undefined;
  isPrivate: boolean;
  allowedUsers?: Array<string> | undefined;
  allowedDomains?: Array<string> | undefined;
};

/** @internal */
export const Postv1GuidesRequestBody$outboundSchema: z.ZodType<
  Postv1GuidesRequestBody$Outbound,
  z.ZodTypeDef,
  Postv1GuidesRequestBody
> = z.object({
  name: z.string(),
  slug: z.string().optional(),
  isPrivate: z.boolean().default(false),
  allowedUsers: z.array(z.string()).optional(),
  allowedDomains: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1GuidesRequestBody$ {
  /** @deprecated use `Postv1GuidesRequestBody$inboundSchema` instead. */
  export const inboundSchema = Postv1GuidesRequestBody$inboundSchema;
  /** @deprecated use `Postv1GuidesRequestBody$outboundSchema` instead. */
  export const outboundSchema = Postv1GuidesRequestBody$outboundSchema;
  /** @deprecated use `Postv1GuidesRequestBody$Outbound` instead. */
  export type Outbound = Postv1GuidesRequestBody$Outbound;
}

export function postv1GuidesRequestBodyToJSON(
  postv1GuidesRequestBody: Postv1GuidesRequestBody,
): string {
  return JSON.stringify(
    Postv1GuidesRequestBody$outboundSchema.parse(postv1GuidesRequestBody),
  );
}

export function postv1GuidesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1GuidesRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1GuidesRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1GuidesRequestBody' from JSON`,
  );
}

/** @internal */
export const Postv1GuidesResponseBody$inboundSchema: z.ZodType<
  Postv1GuidesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
  slug: z.string(),
});

/** @internal */
export type Postv1GuidesResponseBody$Outbound = {
  uid: string;
  slug: string;
};

/** @internal */
export const Postv1GuidesResponseBody$outboundSchema: z.ZodType<
  Postv1GuidesResponseBody$Outbound,
  z.ZodTypeDef,
  Postv1GuidesResponseBody
> = z.object({
  uid: z.string(),
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1GuidesResponseBody$ {
  /** @deprecated use `Postv1GuidesResponseBody$inboundSchema` instead. */
  export const inboundSchema = Postv1GuidesResponseBody$inboundSchema;
  /** @deprecated use `Postv1GuidesResponseBody$outboundSchema` instead. */
  export const outboundSchema = Postv1GuidesResponseBody$outboundSchema;
  /** @deprecated use `Postv1GuidesResponseBody$Outbound` instead. */
  export type Outbound = Postv1GuidesResponseBody$Outbound;
}

export function postv1GuidesResponseBodyToJSON(
  postv1GuidesResponseBody: Postv1GuidesResponseBody,
): string {
  return JSON.stringify(
    Postv1GuidesResponseBody$outboundSchema.parse(postv1GuidesResponseBody),
  );
}

export function postv1GuidesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1GuidesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1GuidesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1GuidesResponseBody' from JSON`,
  );
}
