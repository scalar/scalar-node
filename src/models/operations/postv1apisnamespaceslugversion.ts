/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Postv1ApisNamespaceSlugVersionRequestBody = {
  version: string;
  document: string;
};

export type Postv1ApisNamespaceSlugVersionRequest = {
  namespace: string;
  slug: string;
  requestBody: Postv1ApisNamespaceSlugVersionRequestBody;
};

/**
 * Default Response
 */
export type Postv1ApisNamespaceSlugVersionResponseBody = {
  uid: string;
};

/** @internal */
export const Postv1ApisNamespaceSlugVersionRequestBody$inboundSchema: z.ZodType<
  Postv1ApisNamespaceSlugVersionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  document: z.string(),
});

/** @internal */
export type Postv1ApisNamespaceSlugVersionRequestBody$Outbound = {
  version: string;
  document: string;
};

/** @internal */
export const Postv1ApisNamespaceSlugVersionRequestBody$outboundSchema:
  z.ZodType<
    Postv1ApisNamespaceSlugVersionRequestBody$Outbound,
    z.ZodTypeDef,
    Postv1ApisNamespaceSlugVersionRequestBody
  > = z.object({
    version: z.string(),
    document: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1ApisNamespaceSlugVersionRequestBody$ {
  /** @deprecated use `Postv1ApisNamespaceSlugVersionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    Postv1ApisNamespaceSlugVersionRequestBody$inboundSchema;
  /** @deprecated use `Postv1ApisNamespaceSlugVersionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Postv1ApisNamespaceSlugVersionRequestBody$outboundSchema;
  /** @deprecated use `Postv1ApisNamespaceSlugVersionRequestBody$Outbound` instead. */
  export type Outbound = Postv1ApisNamespaceSlugVersionRequestBody$Outbound;
}

export function postv1ApisNamespaceSlugVersionRequestBodyToJSON(
  postv1ApisNamespaceSlugVersionRequestBody:
    Postv1ApisNamespaceSlugVersionRequestBody,
): string {
  return JSON.stringify(
    Postv1ApisNamespaceSlugVersionRequestBody$outboundSchema.parse(
      postv1ApisNamespaceSlugVersionRequestBody,
    ),
  );
}

export function postv1ApisNamespaceSlugVersionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  Postv1ApisNamespaceSlugVersionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1ApisNamespaceSlugVersionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Postv1ApisNamespaceSlugVersionRequestBody' from JSON`,
  );
}

/** @internal */
export const Postv1ApisNamespaceSlugVersionRequest$inboundSchema: z.ZodType<
  Postv1ApisNamespaceSlugVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  RequestBody: z.lazy(() =>
    Postv1ApisNamespaceSlugVersionRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type Postv1ApisNamespaceSlugVersionRequest$Outbound = {
  namespace: string;
  slug: string;
  RequestBody: Postv1ApisNamespaceSlugVersionRequestBody$Outbound;
};

/** @internal */
export const Postv1ApisNamespaceSlugVersionRequest$outboundSchema: z.ZodType<
  Postv1ApisNamespaceSlugVersionRequest$Outbound,
  z.ZodTypeDef,
  Postv1ApisNamespaceSlugVersionRequest
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  requestBody: z.lazy(() =>
    Postv1ApisNamespaceSlugVersionRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1ApisNamespaceSlugVersionRequest$ {
  /** @deprecated use `Postv1ApisNamespaceSlugVersionRequest$inboundSchema` instead. */
  export const inboundSchema =
    Postv1ApisNamespaceSlugVersionRequest$inboundSchema;
  /** @deprecated use `Postv1ApisNamespaceSlugVersionRequest$outboundSchema` instead. */
  export const outboundSchema =
    Postv1ApisNamespaceSlugVersionRequest$outboundSchema;
  /** @deprecated use `Postv1ApisNamespaceSlugVersionRequest$Outbound` instead. */
  export type Outbound = Postv1ApisNamespaceSlugVersionRequest$Outbound;
}

export function postv1ApisNamespaceSlugVersionRequestToJSON(
  postv1ApisNamespaceSlugVersionRequest: Postv1ApisNamespaceSlugVersionRequest,
): string {
  return JSON.stringify(
    Postv1ApisNamespaceSlugVersionRequest$outboundSchema.parse(
      postv1ApisNamespaceSlugVersionRequest,
    ),
  );
}

export function postv1ApisNamespaceSlugVersionRequestFromJSON(
  jsonString: string,
): SafeParseResult<Postv1ApisNamespaceSlugVersionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1ApisNamespaceSlugVersionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1ApisNamespaceSlugVersionRequest' from JSON`,
  );
}

/** @internal */
export const Postv1ApisNamespaceSlugVersionResponseBody$inboundSchema:
  z.ZodType<Postv1ApisNamespaceSlugVersionResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      uid: z.string(),
    });

/** @internal */
export type Postv1ApisNamespaceSlugVersionResponseBody$Outbound = {
  uid: string;
};

/** @internal */
export const Postv1ApisNamespaceSlugVersionResponseBody$outboundSchema:
  z.ZodType<
    Postv1ApisNamespaceSlugVersionResponseBody$Outbound,
    z.ZodTypeDef,
    Postv1ApisNamespaceSlugVersionResponseBody
  > = z.object({
    uid: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1ApisNamespaceSlugVersionResponseBody$ {
  /** @deprecated use `Postv1ApisNamespaceSlugVersionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    Postv1ApisNamespaceSlugVersionResponseBody$inboundSchema;
  /** @deprecated use `Postv1ApisNamespaceSlugVersionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    Postv1ApisNamespaceSlugVersionResponseBody$outboundSchema;
  /** @deprecated use `Postv1ApisNamespaceSlugVersionResponseBody$Outbound` instead. */
  export type Outbound = Postv1ApisNamespaceSlugVersionResponseBody$Outbound;
}

export function postv1ApisNamespaceSlugVersionResponseBodyToJSON(
  postv1ApisNamespaceSlugVersionResponseBody:
    Postv1ApisNamespaceSlugVersionResponseBody,
): string {
  return JSON.stringify(
    Postv1ApisNamespaceSlugVersionResponseBody$outboundSchema.parse(
      postv1ApisNamespaceSlugVersionResponseBody,
    ),
  );
}

export function postv1ApisNamespaceSlugVersionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  Postv1ApisNamespaceSlugVersionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1ApisNamespaceSlugVersionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Postv1ApisNamespaceSlugVersionResponseBody' from JSON`,
  );
}
