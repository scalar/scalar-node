/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Postv1RulesetsNamespaceRequestBody = {
  title: string;
  description?: string | undefined;
  slug: string;
  isPrivate?: boolean | undefined;
  document: string;
};

export type Postv1RulesetsNamespaceRequest = {
  namespace: string;
  requestBody: Postv1RulesetsNamespaceRequestBody;
};

/**
 * Default Response
 */
export type Postv1RulesetsNamespaceResponseBody = {
  uid: string;
};

/** @internal */
export const Postv1RulesetsNamespaceRequestBody$inboundSchema: z.ZodType<
  Postv1RulesetsNamespaceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  description: z.string().optional(),
  slug: z.string(),
  isPrivate: z.boolean().optional(),
  document: z.string(),
});

/** @internal */
export type Postv1RulesetsNamespaceRequestBody$Outbound = {
  title: string;
  description?: string | undefined;
  slug: string;
  isPrivate?: boolean | undefined;
  document: string;
};

/** @internal */
export const Postv1RulesetsNamespaceRequestBody$outboundSchema: z.ZodType<
  Postv1RulesetsNamespaceRequestBody$Outbound,
  z.ZodTypeDef,
  Postv1RulesetsNamespaceRequestBody
> = z.object({
  title: z.string(),
  description: z.string().optional(),
  slug: z.string(),
  isPrivate: z.boolean().optional(),
  document: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1RulesetsNamespaceRequestBody$ {
  /** @deprecated use `Postv1RulesetsNamespaceRequestBody$inboundSchema` instead. */
  export const inboundSchema = Postv1RulesetsNamespaceRequestBody$inboundSchema;
  /** @deprecated use `Postv1RulesetsNamespaceRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Postv1RulesetsNamespaceRequestBody$outboundSchema;
  /** @deprecated use `Postv1RulesetsNamespaceRequestBody$Outbound` instead. */
  export type Outbound = Postv1RulesetsNamespaceRequestBody$Outbound;
}

export function postv1RulesetsNamespaceRequestBodyToJSON(
  postv1RulesetsNamespaceRequestBody: Postv1RulesetsNamespaceRequestBody,
): string {
  return JSON.stringify(
    Postv1RulesetsNamespaceRequestBody$outboundSchema.parse(
      postv1RulesetsNamespaceRequestBody,
    ),
  );
}

export function postv1RulesetsNamespaceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1RulesetsNamespaceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1RulesetsNamespaceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1RulesetsNamespaceRequestBody' from JSON`,
  );
}

/** @internal */
export const Postv1RulesetsNamespaceRequest$inboundSchema: z.ZodType<
  Postv1RulesetsNamespaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  RequestBody: z.lazy(() => Postv1RulesetsNamespaceRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type Postv1RulesetsNamespaceRequest$Outbound = {
  namespace: string;
  RequestBody: Postv1RulesetsNamespaceRequestBody$Outbound;
};

/** @internal */
export const Postv1RulesetsNamespaceRequest$outboundSchema: z.ZodType<
  Postv1RulesetsNamespaceRequest$Outbound,
  z.ZodTypeDef,
  Postv1RulesetsNamespaceRequest
> = z.object({
  namespace: z.string(),
  requestBody: z.lazy(() => Postv1RulesetsNamespaceRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1RulesetsNamespaceRequest$ {
  /** @deprecated use `Postv1RulesetsNamespaceRequest$inboundSchema` instead. */
  export const inboundSchema = Postv1RulesetsNamespaceRequest$inboundSchema;
  /** @deprecated use `Postv1RulesetsNamespaceRequest$outboundSchema` instead. */
  export const outboundSchema = Postv1RulesetsNamespaceRequest$outboundSchema;
  /** @deprecated use `Postv1RulesetsNamespaceRequest$Outbound` instead. */
  export type Outbound = Postv1RulesetsNamespaceRequest$Outbound;
}

export function postv1RulesetsNamespaceRequestToJSON(
  postv1RulesetsNamespaceRequest: Postv1RulesetsNamespaceRequest,
): string {
  return JSON.stringify(
    Postv1RulesetsNamespaceRequest$outboundSchema.parse(
      postv1RulesetsNamespaceRequest,
    ),
  );
}

export function postv1RulesetsNamespaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<Postv1RulesetsNamespaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1RulesetsNamespaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1RulesetsNamespaceRequest' from JSON`,
  );
}

/** @internal */
export const Postv1RulesetsNamespaceResponseBody$inboundSchema: z.ZodType<
  Postv1RulesetsNamespaceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
});

/** @internal */
export type Postv1RulesetsNamespaceResponseBody$Outbound = {
  uid: string;
};

/** @internal */
export const Postv1RulesetsNamespaceResponseBody$outboundSchema: z.ZodType<
  Postv1RulesetsNamespaceResponseBody$Outbound,
  z.ZodTypeDef,
  Postv1RulesetsNamespaceResponseBody
> = z.object({
  uid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1RulesetsNamespaceResponseBody$ {
  /** @deprecated use `Postv1RulesetsNamespaceResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    Postv1RulesetsNamespaceResponseBody$inboundSchema;
  /** @deprecated use `Postv1RulesetsNamespaceResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    Postv1RulesetsNamespaceResponseBody$outboundSchema;
  /** @deprecated use `Postv1RulesetsNamespaceResponseBody$Outbound` instead. */
  export type Outbound = Postv1RulesetsNamespaceResponseBody$Outbound;
}

export function postv1RulesetsNamespaceResponseBodyToJSON(
  postv1RulesetsNamespaceResponseBody: Postv1RulesetsNamespaceResponseBody,
): string {
  return JSON.stringify(
    Postv1RulesetsNamespaceResponseBody$outboundSchema.parse(
      postv1RulesetsNamespaceResponseBody,
    ),
  );
}

export function postv1RulesetsNamespaceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1RulesetsNamespaceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1RulesetsNamespaceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1RulesetsNamespaceResponseBody' from JSON`,
  );
}
