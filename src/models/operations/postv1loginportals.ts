/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Email = {
  logo?: string | undefined;
  logoSize?: string | undefined;
  buttonText?: string | undefined;
  message?: string | undefined;
  title?: string | undefined;
  mainColor?: string | undefined;
  mainBackground?: string | undefined;
  cardColor?: string | undefined;
  cardBackground?: string | undefined;
  buttonColor?: string | undefined;
  buttonBackground?: string | undefined;
};

export type Page = {
  title?: string | undefined;
  description?: string | undefined;
  head?: string | undefined;
  script?: string | undefined;
  theme?: string | undefined;
  companyName?: string | undefined;
  logo?: string | undefined;
  logoURL?: string | undefined;
  favicon?: string | undefined;
  termsLink?: string | undefined;
  privacyLink?: string | undefined;
  formTitle?: string | undefined;
  formDescription?: string | undefined;
  formImage?: string | undefined;
};

export type Postv1LoginPortalsRequestBody = {
  title: string;
  slug: string;
  email: Email;
  page: Page;
};

/**
 * Default Response
 */
export type Postv1LoginPortalsResponseBody = {
  uid: string;
};

/** @internal */
export const Email$inboundSchema: z.ZodType<Email, z.ZodTypeDef, unknown> = z
  .object({
    logo: z.string().default(""),
    logoSize: z.string().default("100"),
    buttonText: z.string().default("Login"),
    message: z.string().default(
      "Click to access private documentation hosted by scalar.com",
    ),
    title: z.string().default("Private Docs"),
    mainColor: z.string().default("#2a2f45"),
    mainBackground: z.string().default("#f6f6f6"),
    cardColor: z.string().default("2a2f45"),
    cardBackground: z.string().default("#fff"),
    buttonColor: z.string().default("#fff"),
    buttonBackground: z.string().default("#0f0f0f"),
  });

/** @internal */
export type Email$Outbound = {
  logo: string;
  logoSize: string;
  buttonText: string;
  message: string;
  title: string;
  mainColor: string;
  mainBackground: string;
  cardColor: string;
  cardBackground: string;
  buttonColor: string;
  buttonBackground: string;
};

/** @internal */
export const Email$outboundSchema: z.ZodType<
  Email$Outbound,
  z.ZodTypeDef,
  Email
> = z.object({
  logo: z.string().default(""),
  logoSize: z.string().default("100"),
  buttonText: z.string().default("Login"),
  message: z.string().default(
    "Click to access private documentation hosted by scalar.com",
  ),
  title: z.string().default("Private Docs"),
  mainColor: z.string().default("#2a2f45"),
  mainBackground: z.string().default("#f6f6f6"),
  cardColor: z.string().default("2a2f45"),
  cardBackground: z.string().default("#fff"),
  buttonColor: z.string().default("#fff"),
  buttonBackground: z.string().default("#0f0f0f"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Email$ {
  /** @deprecated use `Email$inboundSchema` instead. */
  export const inboundSchema = Email$inboundSchema;
  /** @deprecated use `Email$outboundSchema` instead. */
  export const outboundSchema = Email$outboundSchema;
  /** @deprecated use `Email$Outbound` instead. */
  export type Outbound = Email$Outbound;
}

export function emailToJSON(email: Email): string {
  return JSON.stringify(Email$outboundSchema.parse(email));
}

export function emailFromJSON(
  jsonString: string,
): SafeParseResult<Email, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Email$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Email' from JSON`,
  );
}

/** @internal */
export const Page$inboundSchema: z.ZodType<Page, z.ZodTypeDef, unknown> = z
  .object({
    title: z.string().default("Scalar Private Docs"),
    description: z.string().default("Login to access your documentation"),
    head: z.string().default(""),
    script: z.string().default(""),
    theme: z.string().default(""),
    companyName: z.string().default(""),
    logo: z.string().default(""),
    logoURL: z.string().default(""),
    favicon: z.string().default(""),
    termsLink: z.string().default(""),
    privacyLink: z.string().default(""),
    formTitle: z.string().default("Scalar Private Docs"),
    formDescription: z.string().default("Login to access your documentation"),
    formImage: z.string().default(""),
  });

/** @internal */
export type Page$Outbound = {
  title: string;
  description: string;
  head: string;
  script: string;
  theme: string;
  companyName: string;
  logo: string;
  logoURL: string;
  favicon: string;
  termsLink: string;
  privacyLink: string;
  formTitle: string;
  formDescription: string;
  formImage: string;
};

/** @internal */
export const Page$outboundSchema: z.ZodType<Page$Outbound, z.ZodTypeDef, Page> =
  z.object({
    title: z.string().default("Scalar Private Docs"),
    description: z.string().default("Login to access your documentation"),
    head: z.string().default(""),
    script: z.string().default(""),
    theme: z.string().default(""),
    companyName: z.string().default(""),
    logo: z.string().default(""),
    logoURL: z.string().default(""),
    favicon: z.string().default(""),
    termsLink: z.string().default(""),
    privacyLink: z.string().default(""),
    formTitle: z.string().default("Scalar Private Docs"),
    formDescription: z.string().default("Login to access your documentation"),
    formImage: z.string().default(""),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Page$ {
  /** @deprecated use `Page$inboundSchema` instead. */
  export const inboundSchema = Page$inboundSchema;
  /** @deprecated use `Page$outboundSchema` instead. */
  export const outboundSchema = Page$outboundSchema;
  /** @deprecated use `Page$Outbound` instead. */
  export type Outbound = Page$Outbound;
}

export function pageToJSON(page: Page): string {
  return JSON.stringify(Page$outboundSchema.parse(page));
}

export function pageFromJSON(
  jsonString: string,
): SafeParseResult<Page, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Page$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Page' from JSON`,
  );
}

/** @internal */
export const Postv1LoginPortalsRequestBody$inboundSchema: z.ZodType<
  Postv1LoginPortalsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  slug: z.string(),
  email: z.lazy(() => Email$inboundSchema),
  page: z.lazy(() => Page$inboundSchema),
});

/** @internal */
export type Postv1LoginPortalsRequestBody$Outbound = {
  title: string;
  slug: string;
  email: Email$Outbound;
  page: Page$Outbound;
};

/** @internal */
export const Postv1LoginPortalsRequestBody$outboundSchema: z.ZodType<
  Postv1LoginPortalsRequestBody$Outbound,
  z.ZodTypeDef,
  Postv1LoginPortalsRequestBody
> = z.object({
  title: z.string(),
  slug: z.string(),
  email: z.lazy(() => Email$outboundSchema),
  page: z.lazy(() => Page$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1LoginPortalsRequestBody$ {
  /** @deprecated use `Postv1LoginPortalsRequestBody$inboundSchema` instead. */
  export const inboundSchema = Postv1LoginPortalsRequestBody$inboundSchema;
  /** @deprecated use `Postv1LoginPortalsRequestBody$outboundSchema` instead. */
  export const outboundSchema = Postv1LoginPortalsRequestBody$outboundSchema;
  /** @deprecated use `Postv1LoginPortalsRequestBody$Outbound` instead. */
  export type Outbound = Postv1LoginPortalsRequestBody$Outbound;
}

export function postv1LoginPortalsRequestBodyToJSON(
  postv1LoginPortalsRequestBody: Postv1LoginPortalsRequestBody,
): string {
  return JSON.stringify(
    Postv1LoginPortalsRequestBody$outboundSchema.parse(
      postv1LoginPortalsRequestBody,
    ),
  );
}

export function postv1LoginPortalsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1LoginPortalsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1LoginPortalsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1LoginPortalsRequestBody' from JSON`,
  );
}

/** @internal */
export const Postv1LoginPortalsResponseBody$inboundSchema: z.ZodType<
  Postv1LoginPortalsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
});

/** @internal */
export type Postv1LoginPortalsResponseBody$Outbound = {
  uid: string;
};

/** @internal */
export const Postv1LoginPortalsResponseBody$outboundSchema: z.ZodType<
  Postv1LoginPortalsResponseBody$Outbound,
  z.ZodTypeDef,
  Postv1LoginPortalsResponseBody
> = z.object({
  uid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1LoginPortalsResponseBody$ {
  /** @deprecated use `Postv1LoginPortalsResponseBody$inboundSchema` instead. */
  export const inboundSchema = Postv1LoginPortalsResponseBody$inboundSchema;
  /** @deprecated use `Postv1LoginPortalsResponseBody$outboundSchema` instead. */
  export const outboundSchema = Postv1LoginPortalsResponseBody$outboundSchema;
  /** @deprecated use `Postv1LoginPortalsResponseBody$Outbound` instead. */
  export type Outbound = Postv1LoginPortalsResponseBody$Outbound;
}

export function postv1LoginPortalsResponseBodyToJSON(
  postv1LoginPortalsResponseBody: Postv1LoginPortalsResponseBody,
): string {
  return JSON.stringify(
    Postv1LoginPortalsResponseBody$outboundSchema.parse(
      postv1LoginPortalsResponseBody,
    ),
  );
}

export function postv1LoginPortalsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1LoginPortalsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1LoginPortalsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1LoginPortalsResponseBody' from JSON`,
  );
}
