/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Patchv1RulesetsNamespaceSlugRequestBody = {
  namespace?: string | undefined;
  slug?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  isPrivate?: boolean | undefined;
};

export type Patchv1RulesetsNamespaceSlugRequest = {
  namespace: string;
  slug: string;
  requestBody: Patchv1RulesetsNamespaceSlugRequestBody;
};

/** @internal */
export const Patchv1RulesetsNamespaceSlugRequestBody$inboundSchema: z.ZodType<
  Patchv1RulesetsNamespaceSlugRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string().optional(),
  slug: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  isPrivate: z.boolean().optional(),
});

/** @internal */
export type Patchv1RulesetsNamespaceSlugRequestBody$Outbound = {
  namespace?: string | undefined;
  slug?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  isPrivate?: boolean | undefined;
};

/** @internal */
export const Patchv1RulesetsNamespaceSlugRequestBody$outboundSchema: z.ZodType<
  Patchv1RulesetsNamespaceSlugRequestBody$Outbound,
  z.ZodTypeDef,
  Patchv1RulesetsNamespaceSlugRequestBody
> = z.object({
  namespace: z.string().optional(),
  slug: z.string().optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  isPrivate: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Patchv1RulesetsNamespaceSlugRequestBody$ {
  /** @deprecated use `Patchv1RulesetsNamespaceSlugRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    Patchv1RulesetsNamespaceSlugRequestBody$inboundSchema;
  /** @deprecated use `Patchv1RulesetsNamespaceSlugRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Patchv1RulesetsNamespaceSlugRequestBody$outboundSchema;
  /** @deprecated use `Patchv1RulesetsNamespaceSlugRequestBody$Outbound` instead. */
  export type Outbound = Patchv1RulesetsNamespaceSlugRequestBody$Outbound;
}

export function patchv1RulesetsNamespaceSlugRequestBodyToJSON(
  patchv1RulesetsNamespaceSlugRequestBody:
    Patchv1RulesetsNamespaceSlugRequestBody,
): string {
  return JSON.stringify(
    Patchv1RulesetsNamespaceSlugRequestBody$outboundSchema.parse(
      patchv1RulesetsNamespaceSlugRequestBody,
    ),
  );
}

export function patchv1RulesetsNamespaceSlugRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  Patchv1RulesetsNamespaceSlugRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Patchv1RulesetsNamespaceSlugRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Patchv1RulesetsNamespaceSlugRequestBody' from JSON`,
  );
}

/** @internal */
export const Patchv1RulesetsNamespaceSlugRequest$inboundSchema: z.ZodType<
  Patchv1RulesetsNamespaceSlugRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  RequestBody: z.lazy(() =>
    Patchv1RulesetsNamespaceSlugRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type Patchv1RulesetsNamespaceSlugRequest$Outbound = {
  namespace: string;
  slug: string;
  RequestBody: Patchv1RulesetsNamespaceSlugRequestBody$Outbound;
};

/** @internal */
export const Patchv1RulesetsNamespaceSlugRequest$outboundSchema: z.ZodType<
  Patchv1RulesetsNamespaceSlugRequest$Outbound,
  z.ZodTypeDef,
  Patchv1RulesetsNamespaceSlugRequest
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  requestBody: z.lazy(() =>
    Patchv1RulesetsNamespaceSlugRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Patchv1RulesetsNamespaceSlugRequest$ {
  /** @deprecated use `Patchv1RulesetsNamespaceSlugRequest$inboundSchema` instead. */
  export const inboundSchema =
    Patchv1RulesetsNamespaceSlugRequest$inboundSchema;
  /** @deprecated use `Patchv1RulesetsNamespaceSlugRequest$outboundSchema` instead. */
  export const outboundSchema =
    Patchv1RulesetsNamespaceSlugRequest$outboundSchema;
  /** @deprecated use `Patchv1RulesetsNamespaceSlugRequest$Outbound` instead. */
  export type Outbound = Patchv1RulesetsNamespaceSlugRequest$Outbound;
}

export function patchv1RulesetsNamespaceSlugRequestToJSON(
  patchv1RulesetsNamespaceSlugRequest: Patchv1RulesetsNamespaceSlugRequest,
): string {
  return JSON.stringify(
    Patchv1RulesetsNamespaceSlugRequest$outboundSchema.parse(
      patchv1RulesetsNamespaceSlugRequest,
    ),
  );
}

export function patchv1RulesetsNamespaceSlugRequestFromJSON(
  jsonString: string,
): SafeParseResult<Patchv1RulesetsNamespaceSlugRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Patchv1RulesetsNamespaceSlugRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Patchv1RulesetsNamespaceSlugRequest' from JSON`,
  );
}
