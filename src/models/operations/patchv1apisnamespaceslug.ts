/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Patchv1ApisNamespaceSlugRequestBody = {
  title?: string | undefined;
  description?: string | undefined;
  isPrivate?: boolean | undefined;
  ruleset?: string | undefined;
};

export type Patchv1ApisNamespaceSlugRequest = {
  namespace: string;
  slug: string;
  requestBody: Patchv1ApisNamespaceSlugRequestBody;
};

/** @internal */
export const Patchv1ApisNamespaceSlugRequestBody$inboundSchema: z.ZodType<
  Patchv1ApisNamespaceSlugRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  isPrivate: z.boolean().optional(),
  ruleset: z.string().optional(),
});

/** @internal */
export type Patchv1ApisNamespaceSlugRequestBody$Outbound = {
  title?: string | undefined;
  description?: string | undefined;
  isPrivate?: boolean | undefined;
  ruleset?: string | undefined;
};

/** @internal */
export const Patchv1ApisNamespaceSlugRequestBody$outboundSchema: z.ZodType<
  Patchv1ApisNamespaceSlugRequestBody$Outbound,
  z.ZodTypeDef,
  Patchv1ApisNamespaceSlugRequestBody
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  isPrivate: z.boolean().optional(),
  ruleset: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Patchv1ApisNamespaceSlugRequestBody$ {
  /** @deprecated use `Patchv1ApisNamespaceSlugRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    Patchv1ApisNamespaceSlugRequestBody$inboundSchema;
  /** @deprecated use `Patchv1ApisNamespaceSlugRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Patchv1ApisNamespaceSlugRequestBody$outboundSchema;
  /** @deprecated use `Patchv1ApisNamespaceSlugRequestBody$Outbound` instead. */
  export type Outbound = Patchv1ApisNamespaceSlugRequestBody$Outbound;
}

export function patchv1ApisNamespaceSlugRequestBodyToJSON(
  patchv1ApisNamespaceSlugRequestBody: Patchv1ApisNamespaceSlugRequestBody,
): string {
  return JSON.stringify(
    Patchv1ApisNamespaceSlugRequestBody$outboundSchema.parse(
      patchv1ApisNamespaceSlugRequestBody,
    ),
  );
}

export function patchv1ApisNamespaceSlugRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Patchv1ApisNamespaceSlugRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Patchv1ApisNamespaceSlugRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Patchv1ApisNamespaceSlugRequestBody' from JSON`,
  );
}

/** @internal */
export const Patchv1ApisNamespaceSlugRequest$inboundSchema: z.ZodType<
  Patchv1ApisNamespaceSlugRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  RequestBody: z.lazy(() => Patchv1ApisNamespaceSlugRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type Patchv1ApisNamespaceSlugRequest$Outbound = {
  namespace: string;
  slug: string;
  RequestBody: Patchv1ApisNamespaceSlugRequestBody$Outbound;
};

/** @internal */
export const Patchv1ApisNamespaceSlugRequest$outboundSchema: z.ZodType<
  Patchv1ApisNamespaceSlugRequest$Outbound,
  z.ZodTypeDef,
  Patchv1ApisNamespaceSlugRequest
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  requestBody: z.lazy(() => Patchv1ApisNamespaceSlugRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Patchv1ApisNamespaceSlugRequest$ {
  /** @deprecated use `Patchv1ApisNamespaceSlugRequest$inboundSchema` instead. */
  export const inboundSchema = Patchv1ApisNamespaceSlugRequest$inboundSchema;
  /** @deprecated use `Patchv1ApisNamespaceSlugRequest$outboundSchema` instead. */
  export const outboundSchema = Patchv1ApisNamespaceSlugRequest$outboundSchema;
  /** @deprecated use `Patchv1ApisNamespaceSlugRequest$Outbound` instead. */
  export type Outbound = Patchv1ApisNamespaceSlugRequest$Outbound;
}

export function patchv1ApisNamespaceSlugRequestToJSON(
  patchv1ApisNamespaceSlugRequest: Patchv1ApisNamespaceSlugRequest,
): string {
  return JSON.stringify(
    Patchv1ApisNamespaceSlugRequest$outboundSchema.parse(
      patchv1ApisNamespaceSlugRequest,
    ),
  );
}

export function patchv1ApisNamespaceSlugRequestFromJSON(
  jsonString: string,
): SafeParseResult<Patchv1ApisNamespaceSlugRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Patchv1ApisNamespaceSlugRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Patchv1ApisNamespaceSlugRequest' from JSON`,
  );
}
