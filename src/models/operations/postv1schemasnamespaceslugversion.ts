/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Postv1SchemasNamespaceSlugVersionRequestBody = {
  version: string;
  document: string;
};

export type Postv1SchemasNamespaceSlugVersionRequest = {
  namespace: string;
  slug: string;
  requestBody: Postv1SchemasNamespaceSlugVersionRequestBody;
};

/**
 * Default Response
 */
export type Postv1SchemasNamespaceSlugVersionResponseBody = {
  uid: string;
};

/** @internal */
export const Postv1SchemasNamespaceSlugVersionRequestBody$inboundSchema:
  z.ZodType<
    Postv1SchemasNamespaceSlugVersionRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    version: z.string(),
    document: z.string(),
  });

/** @internal */
export type Postv1SchemasNamespaceSlugVersionRequestBody$Outbound = {
  version: string;
  document: string;
};

/** @internal */
export const Postv1SchemasNamespaceSlugVersionRequestBody$outboundSchema:
  z.ZodType<
    Postv1SchemasNamespaceSlugVersionRequestBody$Outbound,
    z.ZodTypeDef,
    Postv1SchemasNamespaceSlugVersionRequestBody
  > = z.object({
    version: z.string(),
    document: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1SchemasNamespaceSlugVersionRequestBody$ {
  /** @deprecated use `Postv1SchemasNamespaceSlugVersionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    Postv1SchemasNamespaceSlugVersionRequestBody$inboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugVersionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Postv1SchemasNamespaceSlugVersionRequestBody$outboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugVersionRequestBody$Outbound` instead. */
  export type Outbound = Postv1SchemasNamespaceSlugVersionRequestBody$Outbound;
}

export function postv1SchemasNamespaceSlugVersionRequestBodyToJSON(
  postv1SchemasNamespaceSlugVersionRequestBody:
    Postv1SchemasNamespaceSlugVersionRequestBody,
): string {
  return JSON.stringify(
    Postv1SchemasNamespaceSlugVersionRequestBody$outboundSchema.parse(
      postv1SchemasNamespaceSlugVersionRequestBody,
    ),
  );
}

export function postv1SchemasNamespaceSlugVersionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  Postv1SchemasNamespaceSlugVersionRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1SchemasNamespaceSlugVersionRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Postv1SchemasNamespaceSlugVersionRequestBody' from JSON`,
  );
}

/** @internal */
export const Postv1SchemasNamespaceSlugVersionRequest$inboundSchema: z.ZodType<
  Postv1SchemasNamespaceSlugVersionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  RequestBody: z.lazy(() =>
    Postv1SchemasNamespaceSlugVersionRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type Postv1SchemasNamespaceSlugVersionRequest$Outbound = {
  namespace: string;
  slug: string;
  RequestBody: Postv1SchemasNamespaceSlugVersionRequestBody$Outbound;
};

/** @internal */
export const Postv1SchemasNamespaceSlugVersionRequest$outboundSchema: z.ZodType<
  Postv1SchemasNamespaceSlugVersionRequest$Outbound,
  z.ZodTypeDef,
  Postv1SchemasNamespaceSlugVersionRequest
> = z.object({
  namespace: z.string(),
  slug: z.string(),
  requestBody: z.lazy(() =>
    Postv1SchemasNamespaceSlugVersionRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1SchemasNamespaceSlugVersionRequest$ {
  /** @deprecated use `Postv1SchemasNamespaceSlugVersionRequest$inboundSchema` instead. */
  export const inboundSchema =
    Postv1SchemasNamespaceSlugVersionRequest$inboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugVersionRequest$outboundSchema` instead. */
  export const outboundSchema =
    Postv1SchemasNamespaceSlugVersionRequest$outboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugVersionRequest$Outbound` instead. */
  export type Outbound = Postv1SchemasNamespaceSlugVersionRequest$Outbound;
}

export function postv1SchemasNamespaceSlugVersionRequestToJSON(
  postv1SchemasNamespaceSlugVersionRequest:
    Postv1SchemasNamespaceSlugVersionRequest,
): string {
  return JSON.stringify(
    Postv1SchemasNamespaceSlugVersionRequest$outboundSchema.parse(
      postv1SchemasNamespaceSlugVersionRequest,
    ),
  );
}

export function postv1SchemasNamespaceSlugVersionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  Postv1SchemasNamespaceSlugVersionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1SchemasNamespaceSlugVersionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Postv1SchemasNamespaceSlugVersionRequest' from JSON`,
  );
}

/** @internal */
export const Postv1SchemasNamespaceSlugVersionResponseBody$inboundSchema:
  z.ZodType<
    Postv1SchemasNamespaceSlugVersionResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    uid: z.string(),
  });

/** @internal */
export type Postv1SchemasNamespaceSlugVersionResponseBody$Outbound = {
  uid: string;
};

/** @internal */
export const Postv1SchemasNamespaceSlugVersionResponseBody$outboundSchema:
  z.ZodType<
    Postv1SchemasNamespaceSlugVersionResponseBody$Outbound,
    z.ZodTypeDef,
    Postv1SchemasNamespaceSlugVersionResponseBody
  > = z.object({
    uid: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1SchemasNamespaceSlugVersionResponseBody$ {
  /** @deprecated use `Postv1SchemasNamespaceSlugVersionResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    Postv1SchemasNamespaceSlugVersionResponseBody$inboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugVersionResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    Postv1SchemasNamespaceSlugVersionResponseBody$outboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceSlugVersionResponseBody$Outbound` instead. */
  export type Outbound = Postv1SchemasNamespaceSlugVersionResponseBody$Outbound;
}

export function postv1SchemasNamespaceSlugVersionResponseBodyToJSON(
  postv1SchemasNamespaceSlugVersionResponseBody:
    Postv1SchemasNamespaceSlugVersionResponseBody,
): string {
  return JSON.stringify(
    Postv1SchemasNamespaceSlugVersionResponseBody$outboundSchema.parse(
      postv1SchemasNamespaceSlugVersionResponseBody,
    ),
  );
}

export function postv1SchemasNamespaceSlugVersionResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  Postv1SchemasNamespaceSlugVersionResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1SchemasNamespaceSlugVersionResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Postv1SchemasNamespaceSlugVersionResponseBody' from JSON`,
  );
}
