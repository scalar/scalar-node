/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ActiveDeployment = {
  uid: string;
  domain: string;
  publishedAt: number;
};

export type Repository = {
  linkedBy: string;
  id: number;
  name: string;
  configPath?: string | undefined;
  branch?: string | undefined;
  publishOnMerge?: boolean | undefined;
  publishPreviews?: boolean | undefined;
  prComments?: boolean | undefined;
  expired?: boolean | undefined;
};

export type Getv1GuidesResponseBody = {
  uid?: string | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
  name: string;
  activeDeployment?: ActiveDeployment | null | undefined;
  lastPublished?: number | null | undefined;
  lastPublishedUid?: string | null | undefined;
  loginPortalUid?: string | undefined;
  activeThemeId?: string | undefined;
  typesenseId?: number | undefined;
  isPrivate?: boolean | undefined;
  accessGroups?: Array<string> | undefined;
  slug?: string | undefined;
  publishStatus?: string | undefined;
  publishMessage?: string | undefined;
  repository?: Repository | null | undefined;
};

/** @internal */
export const ActiveDeployment$inboundSchema: z.ZodType<
  ActiveDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
  domain: z.string(),
  publishedAt: z.number().int(),
});

/** @internal */
export type ActiveDeployment$Outbound = {
  uid: string;
  domain: string;
  publishedAt: number;
};

/** @internal */
export const ActiveDeployment$outboundSchema: z.ZodType<
  ActiveDeployment$Outbound,
  z.ZodTypeDef,
  ActiveDeployment
> = z.object({
  uid: z.string(),
  domain: z.string(),
  publishedAt: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActiveDeployment$ {
  /** @deprecated use `ActiveDeployment$inboundSchema` instead. */
  export const inboundSchema = ActiveDeployment$inboundSchema;
  /** @deprecated use `ActiveDeployment$outboundSchema` instead. */
  export const outboundSchema = ActiveDeployment$outboundSchema;
  /** @deprecated use `ActiveDeployment$Outbound` instead. */
  export type Outbound = ActiveDeployment$Outbound;
}

export function activeDeploymentToJSON(
  activeDeployment: ActiveDeployment,
): string {
  return JSON.stringify(
    ActiveDeployment$outboundSchema.parse(activeDeployment),
  );
}

export function activeDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<ActiveDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ActiveDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ActiveDeployment' from JSON`,
  );
}

/** @internal */
export const Repository$inboundSchema: z.ZodType<
  Repository,
  z.ZodTypeDef,
  unknown
> = z.object({
  linkedBy: z.string(),
  id: z.number(),
  name: z.string(),
  configPath: z.string().default(""),
  branch: z.string().default(""),
  publishOnMerge: z.boolean().default(false),
  publishPreviews: z.boolean().default(false),
  prComments: z.boolean().default(false),
  expired: z.boolean().default(false),
});

/** @internal */
export type Repository$Outbound = {
  linkedBy: string;
  id: number;
  name: string;
  configPath: string;
  branch: string;
  publishOnMerge: boolean;
  publishPreviews: boolean;
  prComments: boolean;
  expired: boolean;
};

/** @internal */
export const Repository$outboundSchema: z.ZodType<
  Repository$Outbound,
  z.ZodTypeDef,
  Repository
> = z.object({
  linkedBy: z.string(),
  id: z.number(),
  name: z.string(),
  configPath: z.string().default(""),
  branch: z.string().default(""),
  publishOnMerge: z.boolean().default(false),
  publishPreviews: z.boolean().default(false),
  prComments: z.boolean().default(false),
  expired: z.boolean().default(false),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Repository$ {
  /** @deprecated use `Repository$inboundSchema` instead. */
  export const inboundSchema = Repository$inboundSchema;
  /** @deprecated use `Repository$outboundSchema` instead. */
  export const outboundSchema = Repository$outboundSchema;
  /** @deprecated use `Repository$Outbound` instead. */
  export type Outbound = Repository$Outbound;
}

export function repositoryToJSON(repository: Repository): string {
  return JSON.stringify(Repository$outboundSchema.parse(repository));
}

export function repositoryFromJSON(
  jsonString: string,
): SafeParseResult<Repository, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Repository$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Repository' from JSON`,
  );
}

/** @internal */
export const Getv1GuidesResponseBody$inboundSchema: z.ZodType<
  Getv1GuidesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string().default("wPtEJmUnuUZPNWLjBWNqW"),
  createdAt: z.number().int().default(1756935697),
  updatedAt: z.number().int().default(1756935697),
  name: z.string(),
  activeDeployment: z.nullable(z.lazy(() => ActiveDeployment$inboundSchema))
    .optional(),
  lastPublished: z.nullable(z.number().int()).optional(),
  lastPublishedUid: z.nullable(z.string()).default(null),
  loginPortalUid: z.string().default(""),
  activeThemeId: z.string().default(""),
  typesenseId: z.number().optional(),
  isPrivate: z.boolean().default(false),
  accessGroups: z.array(z.string()).optional(),
  slug: z.string().optional(),
  publishStatus: z.string().default(""),
  publishMessage: z.string().default(""),
  repository: z.nullable(z.lazy(() => Repository$inboundSchema)).optional(),
});

/** @internal */
export type Getv1GuidesResponseBody$Outbound = {
  uid: string;
  createdAt: number;
  updatedAt: number;
  name: string;
  activeDeployment?: ActiveDeployment$Outbound | null | undefined;
  lastPublished?: number | null | undefined;
  lastPublishedUid: string | null;
  loginPortalUid: string;
  activeThemeId: string;
  typesenseId?: number | undefined;
  isPrivate: boolean;
  accessGroups?: Array<string> | undefined;
  slug?: string | undefined;
  publishStatus: string;
  publishMessage: string;
  repository?: Repository$Outbound | null | undefined;
};

/** @internal */
export const Getv1GuidesResponseBody$outboundSchema: z.ZodType<
  Getv1GuidesResponseBody$Outbound,
  z.ZodTypeDef,
  Getv1GuidesResponseBody
> = z.object({
  uid: z.string().default("wPtEJmUnuUZPNWLjBWNqW"),
  createdAt: z.number().int().default(1756935697),
  updatedAt: z.number().int().default(1756935697),
  name: z.string(),
  activeDeployment: z.nullable(z.lazy(() => ActiveDeployment$outboundSchema))
    .optional(),
  lastPublished: z.nullable(z.number().int()).optional(),
  lastPublishedUid: z.nullable(z.string()).default(null),
  loginPortalUid: z.string().default(""),
  activeThemeId: z.string().default(""),
  typesenseId: z.number().optional(),
  isPrivate: z.boolean().default(false),
  accessGroups: z.array(z.string()).optional(),
  slug: z.string().optional(),
  publishStatus: z.string().default(""),
  publishMessage: z.string().default(""),
  repository: z.nullable(z.lazy(() => Repository$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Getv1GuidesResponseBody$ {
  /** @deprecated use `Getv1GuidesResponseBody$inboundSchema` instead. */
  export const inboundSchema = Getv1GuidesResponseBody$inboundSchema;
  /** @deprecated use `Getv1GuidesResponseBody$outboundSchema` instead. */
  export const outboundSchema = Getv1GuidesResponseBody$outboundSchema;
  /** @deprecated use `Getv1GuidesResponseBody$Outbound` instead. */
  export type Outbound = Getv1GuidesResponseBody$Outbound;
}

export function getv1GuidesResponseBodyToJSON(
  getv1GuidesResponseBody: Getv1GuidesResponseBody,
): string {
  return JSON.stringify(
    Getv1GuidesResponseBody$outboundSchema.parse(getv1GuidesResponseBody),
  );
}

export function getv1GuidesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Getv1GuidesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Getv1GuidesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Getv1GuidesResponseBody' from JSON`,
  );
}
