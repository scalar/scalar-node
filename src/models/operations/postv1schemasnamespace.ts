/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Postv1SchemasNamespaceRequestBody = {
  title: string;
  description?: string | undefined;
  version: string;
  slug: string;
  isPrivate?: boolean | undefined;
  document: string;
};

export type Postv1SchemasNamespaceRequest = {
  namespace: string;
  requestBody: Postv1SchemasNamespaceRequestBody;
};

/**
 * Default Response
 */
export type Postv1SchemasNamespaceResponseBody = {
  uid: string;
};

/** @internal */
export const Postv1SchemasNamespaceRequestBody$inboundSchema: z.ZodType<
  Postv1SchemasNamespaceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string(),
  description: z.string().optional(),
  version: z.string(),
  slug: z.string(),
  isPrivate: z.boolean().optional(),
  document: z.string(),
});

/** @internal */
export type Postv1SchemasNamespaceRequestBody$Outbound = {
  title: string;
  description?: string | undefined;
  version: string;
  slug: string;
  isPrivate?: boolean | undefined;
  document: string;
};

/** @internal */
export const Postv1SchemasNamespaceRequestBody$outboundSchema: z.ZodType<
  Postv1SchemasNamespaceRequestBody$Outbound,
  z.ZodTypeDef,
  Postv1SchemasNamespaceRequestBody
> = z.object({
  title: z.string(),
  description: z.string().optional(),
  version: z.string(),
  slug: z.string(),
  isPrivate: z.boolean().optional(),
  document: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1SchemasNamespaceRequestBody$ {
  /** @deprecated use `Postv1SchemasNamespaceRequestBody$inboundSchema` instead. */
  export const inboundSchema = Postv1SchemasNamespaceRequestBody$inboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Postv1SchemasNamespaceRequestBody$outboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceRequestBody$Outbound` instead. */
  export type Outbound = Postv1SchemasNamespaceRequestBody$Outbound;
}

export function postv1SchemasNamespaceRequestBodyToJSON(
  postv1SchemasNamespaceRequestBody: Postv1SchemasNamespaceRequestBody,
): string {
  return JSON.stringify(
    Postv1SchemasNamespaceRequestBody$outboundSchema.parse(
      postv1SchemasNamespaceRequestBody,
    ),
  );
}

export function postv1SchemasNamespaceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1SchemasNamespaceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1SchemasNamespaceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1SchemasNamespaceRequestBody' from JSON`,
  );
}

/** @internal */
export const Postv1SchemasNamespaceRequest$inboundSchema: z.ZodType<
  Postv1SchemasNamespaceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  RequestBody: z.lazy(() => Postv1SchemasNamespaceRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type Postv1SchemasNamespaceRequest$Outbound = {
  namespace: string;
  RequestBody: Postv1SchemasNamespaceRequestBody$Outbound;
};

/** @internal */
export const Postv1SchemasNamespaceRequest$outboundSchema: z.ZodType<
  Postv1SchemasNamespaceRequest$Outbound,
  z.ZodTypeDef,
  Postv1SchemasNamespaceRequest
> = z.object({
  namespace: z.string(),
  requestBody: z.lazy(() => Postv1SchemasNamespaceRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1SchemasNamespaceRequest$ {
  /** @deprecated use `Postv1SchemasNamespaceRequest$inboundSchema` instead. */
  export const inboundSchema = Postv1SchemasNamespaceRequest$inboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceRequest$outboundSchema` instead. */
  export const outboundSchema = Postv1SchemasNamespaceRequest$outboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceRequest$Outbound` instead. */
  export type Outbound = Postv1SchemasNamespaceRequest$Outbound;
}

export function postv1SchemasNamespaceRequestToJSON(
  postv1SchemasNamespaceRequest: Postv1SchemasNamespaceRequest,
): string {
  return JSON.stringify(
    Postv1SchemasNamespaceRequest$outboundSchema.parse(
      postv1SchemasNamespaceRequest,
    ),
  );
}

export function postv1SchemasNamespaceRequestFromJSON(
  jsonString: string,
): SafeParseResult<Postv1SchemasNamespaceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Postv1SchemasNamespaceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1SchemasNamespaceRequest' from JSON`,
  );
}

/** @internal */
export const Postv1SchemasNamespaceResponseBody$inboundSchema: z.ZodType<
  Postv1SchemasNamespaceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uid: z.string(),
});

/** @internal */
export type Postv1SchemasNamespaceResponseBody$Outbound = {
  uid: string;
};

/** @internal */
export const Postv1SchemasNamespaceResponseBody$outboundSchema: z.ZodType<
  Postv1SchemasNamespaceResponseBody$Outbound,
  z.ZodTypeDef,
  Postv1SchemasNamespaceResponseBody
> = z.object({
  uid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Postv1SchemasNamespaceResponseBody$ {
  /** @deprecated use `Postv1SchemasNamespaceResponseBody$inboundSchema` instead. */
  export const inboundSchema = Postv1SchemasNamespaceResponseBody$inboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    Postv1SchemasNamespaceResponseBody$outboundSchema;
  /** @deprecated use `Postv1SchemasNamespaceResponseBody$Outbound` instead. */
  export type Outbound = Postv1SchemasNamespaceResponseBody$Outbound;
}

export function postv1SchemasNamespaceResponseBodyToJSON(
  postv1SchemasNamespaceResponseBody: Postv1SchemasNamespaceResponseBody,
): string {
  return JSON.stringify(
    Postv1SchemasNamespaceResponseBody$outboundSchema.parse(
      postv1SchemasNamespaceResponseBody,
    ),
  );
}

export function postv1SchemasNamespaceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<Postv1SchemasNamespaceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Postv1SchemasNamespaceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Postv1SchemasNamespaceResponseBody' from JSON`,
  );
}
