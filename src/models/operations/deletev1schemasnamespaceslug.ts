/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Deletev1SchemasNamespaceSlugRequest = {
  namespace: string;
  slug: string;
};

/** @internal */
export const Deletev1SchemasNamespaceSlugRequest$inboundSchema: z.ZodType<
  Deletev1SchemasNamespaceSlugRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  namespace: z.string(),
  slug: z.string(),
});

/** @internal */
export type Deletev1SchemasNamespaceSlugRequest$Outbound = {
  namespace: string;
  slug: string;
};

/** @internal */
export const Deletev1SchemasNamespaceSlugRequest$outboundSchema: z.ZodType<
  Deletev1SchemasNamespaceSlugRequest$Outbound,
  z.ZodTypeDef,
  Deletev1SchemasNamespaceSlugRequest
> = z.object({
  namespace: z.string(),
  slug: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deletev1SchemasNamespaceSlugRequest$ {
  /** @deprecated use `Deletev1SchemasNamespaceSlugRequest$inboundSchema` instead. */
  export const inboundSchema =
    Deletev1SchemasNamespaceSlugRequest$inboundSchema;
  /** @deprecated use `Deletev1SchemasNamespaceSlugRequest$outboundSchema` instead. */
  export const outboundSchema =
    Deletev1SchemasNamespaceSlugRequest$outboundSchema;
  /** @deprecated use `Deletev1SchemasNamespaceSlugRequest$Outbound` instead. */
  export type Outbound = Deletev1SchemasNamespaceSlugRequest$Outbound;
}

export function deletev1SchemasNamespaceSlugRequestToJSON(
  deletev1SchemasNamespaceSlugRequest: Deletev1SchemasNamespaceSlugRequest,
): string {
  return JSON.stringify(
    Deletev1SchemasNamespaceSlugRequest$outboundSchema.parse(
      deletev1SchemasNamespaceSlugRequest,
    ),
  );
}

export function deletev1SchemasNamespaceSlugRequestFromJSON(
  jsonString: string,
): SafeParseResult<Deletev1SchemasNamespaceSlugRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      Deletev1SchemasNamespaceSlugRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deletev1SchemasNamespaceSlugRequest' from JSON`,
  );
}
