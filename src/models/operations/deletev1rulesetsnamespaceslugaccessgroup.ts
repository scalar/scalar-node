/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Deletev1RulesetsNamespaceSlugAccessGroupRequestBody = {
  accessGroupSlug: string;
};

export type Deletev1RulesetsNamespaceSlugAccessGroupRequest = {
  namespace: string;
  slug: string;
  requestBody: Deletev1RulesetsNamespaceSlugAccessGroupRequestBody;
};

/** @internal */
export const Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$inboundSchema:
  z.ZodType<
    Deletev1RulesetsNamespaceSlugAccessGroupRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    accessGroupSlug: z.string(),
  });

/** @internal */
export type Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$Outbound = {
  accessGroupSlug: string;
};

/** @internal */
export const Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$outboundSchema:
  z.ZodType<
    Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$Outbound,
    z.ZodTypeDef,
    Deletev1RulesetsNamespaceSlugAccessGroupRequestBody
  > = z.object({
    accessGroupSlug: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$ {
  /** @deprecated use `Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$inboundSchema;
  /** @deprecated use `Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$outboundSchema;
  /** @deprecated use `Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$Outbound` instead. */
  export type Outbound =
    Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$Outbound;
}

export function deletev1RulesetsNamespaceSlugAccessGroupRequestBodyToJSON(
  deletev1RulesetsNamespaceSlugAccessGroupRequestBody:
    Deletev1RulesetsNamespaceSlugAccessGroupRequestBody,
): string {
  return JSON.stringify(
    Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$outboundSchema.parse(
      deletev1RulesetsNamespaceSlugAccessGroupRequestBody,
    ),
  );
}

export function deletev1RulesetsNamespaceSlugAccessGroupRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  Deletev1RulesetsNamespaceSlugAccessGroupRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Deletev1RulesetsNamespaceSlugAccessGroupRequestBody' from JSON`,
  );
}

/** @internal */
export const Deletev1RulesetsNamespaceSlugAccessGroupRequest$inboundSchema:
  z.ZodType<
    Deletev1RulesetsNamespaceSlugAccessGroupRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    namespace: z.string(),
    slug: z.string(),
    RequestBody: z.lazy(() =>
      Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type Deletev1RulesetsNamespaceSlugAccessGroupRequest$Outbound = {
  namespace: string;
  slug: string;
  RequestBody: Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$Outbound;
};

/** @internal */
export const Deletev1RulesetsNamespaceSlugAccessGroupRequest$outboundSchema:
  z.ZodType<
    Deletev1RulesetsNamespaceSlugAccessGroupRequest$Outbound,
    z.ZodTypeDef,
    Deletev1RulesetsNamespaceSlugAccessGroupRequest
  > = z.object({
    namespace: z.string(),
    slug: z.string(),
    requestBody: z.lazy(() =>
      Deletev1RulesetsNamespaceSlugAccessGroupRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deletev1RulesetsNamespaceSlugAccessGroupRequest$ {
  /** @deprecated use `Deletev1RulesetsNamespaceSlugAccessGroupRequest$inboundSchema` instead. */
  export const inboundSchema =
    Deletev1RulesetsNamespaceSlugAccessGroupRequest$inboundSchema;
  /** @deprecated use `Deletev1RulesetsNamespaceSlugAccessGroupRequest$outboundSchema` instead. */
  export const outboundSchema =
    Deletev1RulesetsNamespaceSlugAccessGroupRequest$outboundSchema;
  /** @deprecated use `Deletev1RulesetsNamespaceSlugAccessGroupRequest$Outbound` instead. */
  export type Outbound =
    Deletev1RulesetsNamespaceSlugAccessGroupRequest$Outbound;
}

export function deletev1RulesetsNamespaceSlugAccessGroupRequestToJSON(
  deletev1RulesetsNamespaceSlugAccessGroupRequest:
    Deletev1RulesetsNamespaceSlugAccessGroupRequest,
): string {
  return JSON.stringify(
    Deletev1RulesetsNamespaceSlugAccessGroupRequest$outboundSchema.parse(
      deletev1RulesetsNamespaceSlugAccessGroupRequest,
    ),
  );
}

export function deletev1RulesetsNamespaceSlugAccessGroupRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  Deletev1RulesetsNamespaceSlugAccessGroupRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      Deletev1RulesetsNamespaceSlugAccessGroupRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'Deletev1RulesetsNamespaceSlugAccessGroupRequest' from JSON`,
  );
}
