/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { loginPortalsDeletev1LoginPortalsSlug } from "../funcs/loginPortalsDeletev1LoginPortalsSlug.js";
import { loginPortalsGetv1LoginPortals } from "../funcs/loginPortalsGetv1LoginPortals.js";
import { loginPortalsGetv1LoginPortalsSlug } from "../funcs/loginPortalsGetv1LoginPortalsSlug.js";
import { loginPortalsPatchv1LoginPortalsSlug } from "../funcs/loginPortalsPatchv1LoginPortalsSlug.js";
import { loginPortalsPostv1LoginPortals } from "../funcs/loginPortalsPostv1LoginPortals.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class LoginPortals extends ClientSDK {
  /**
   * Get a login portal
   *
   * @remarks
   * Get a login portal
   */
  async getv1LoginPortalsSlug(
    request: operations.Getv1LoginPortalsSlugRequest,
    options?: RequestOptions,
  ): Promise<operations.Getv1LoginPortalsSlugResponseBody> {
    return unwrapAsync(loginPortalsGetv1LoginPortalsSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Update metadata
   *
   * @remarks
   * Update login portals metadata
   */
  async patchv1LoginPortalsSlug(
    request: operations.Patchv1LoginPortalsSlugRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(loginPortalsPatchv1LoginPortalsSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a login portal
   *
   * @remarks
   * Delete a specific login portal
   */
  async deletev1LoginPortalsSlug(
    request: operations.Deletev1LoginPortalsSlugRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(loginPortalsDeletev1LoginPortalsSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a portal
   *
   * @remarks
   * Create a new login portal for the team
   */
  async postv1LoginPortals(
    request: operations.Postv1LoginPortalsRequestBody,
    options?: RequestOptions,
  ): Promise<operations.Postv1LoginPortalsResponseBody> {
    return unwrapAsync(loginPortalsPostv1LoginPortals(
      this,
      request,
      options,
    ));
  }

  /**
   * List all portals
   *
   * @remarks
   * Get a list of all login portals for the team
   */
  async getv1LoginPortals(
    options?: RequestOptions,
  ): Promise<Array<operations.Getv1LoginPortalsResponseBody>> {
    return unwrapAsync(loginPortalsGetv1LoginPortals(
      this,
      options,
    ));
  }
}
