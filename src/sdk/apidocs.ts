/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { apiDocsDeletev1ApisNamespaceSlug } from "../funcs/apiDocsDeletev1ApisNamespaceSlug.js";
import { apiDocsDeletev1ApisNamespaceSlugAccessGroup } from "../funcs/apiDocsDeletev1ApisNamespaceSlugAccessGroup.js";
import { apiDocsDeletev1ApisNamespaceSlugVersionSemver } from "../funcs/apiDocsDeletev1ApisNamespaceSlugVersionSemver.js";
import { apiDocsGetv1ApisNamespace } from "../funcs/apiDocsGetv1ApisNamespace.js";
import { apiDocsGetv1ApisNamespaceSlugVersionSemver } from "../funcs/apiDocsGetv1ApisNamespaceSlugVersionSemver.js";
import { apiDocsPatchv1ApisNamespaceSlug } from "../funcs/apiDocsPatchv1ApisNamespaceSlug.js";
import { apiDocsPostv1ApisNamespace } from "../funcs/apiDocsPostv1ApisNamespace.js";
import { apiDocsPostv1ApisNamespaceSlugAccessGroup } from "../funcs/apiDocsPostv1ApisNamespaceSlugAccessGroup.js";
import { apiDocsPostv1ApisNamespaceSlugVersion } from "../funcs/apiDocsPostv1ApisNamespaceSlugVersion.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class APIDocs extends ClientSDK {
  /**
   * List all APIs
   *
   * @remarks
   * Get a list of all documents for the namespace
   */
  async getv1ApisNamespace(
    request: operations.Getv1ApisNamespaceRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.ResponseBody>> {
    return unwrapAsync(apiDocsGetv1ApisNamespace(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an API
   *
   * @remarks
   * Create a new api document specification
   */
  async postv1ApisNamespace(
    request: operations.Postv1ApisNamespaceRequest,
    options?: RequestOptions,
  ): Promise<operations.Postv1ApisNamespaceResponseBody> {
    return unwrapAsync(apiDocsPostv1ApisNamespace(
      this,
      request,
      options,
    ));
  }

  /**
   * Update metadata
   *
   * @remarks
   * Update metadata for a specific managed document
   */
  async patchv1ApisNamespaceSlug(
    request: operations.Patchv1ApisNamespaceSlugRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(apiDocsPatchv1ApisNamespaceSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an API
   *
   * @remarks
   * Delete a specific managed document and all of the related versions
   */
  async deletev1ApisNamespaceSlug(
    request: operations.Deletev1ApisNamespaceSlugRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(apiDocsDeletev1ApisNamespaceSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Get API document
   *
   * @remarks
   * Get a specific managed document version stream
   */
  async getv1ApisNamespaceSlugVersionSemver(
    request: operations.Getv1ApisNamespaceSlugVersionSemverRequest,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(apiDocsGetv1ApisNamespaceSlugVersionSemver(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete version
   *
   * @remarks
   * Delete a specific managed document version
   */
  async deletev1ApisNamespaceSlugVersionSemver(
    request: operations.Deletev1ApisNamespaceSlugVersionSemverRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(apiDocsDeletev1ApisNamespaceSlugVersionSemver(
      this,
      request,
      options,
    ));
  }

  /**
   * Create version
   *
   * @remarks
   * Create a new api document version
   */
  async postv1ApisNamespaceSlugVersion(
    request: operations.Postv1ApisNamespaceSlugVersionRequest,
    options?: RequestOptions,
  ): Promise<operations.Postv1ApisNamespaceSlugVersionResponseBody> {
    return unwrapAsync(apiDocsPostv1ApisNamespaceSlugVersion(
      this,
      request,
      options,
    ));
  }

  /**
   * Add API access group
   *
   * @remarks
   * Add an access group for the api document
   */
  async postv1ApisNamespaceSlugAccessGroup(
    request: operations.Postv1ApisNamespaceSlugAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(apiDocsPostv1ApisNamespaceSlugAccessGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete API access group
   *
   * @remarks
   * Delete an access group from api document
   */
  async deletev1ApisNamespaceSlugAccessGroup(
    request: operations.Deletev1ApisNamespaceSlugAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(apiDocsDeletev1ApisNamespaceSlugAccessGroup(
      this,
      request,
      options,
    ));
  }
}
