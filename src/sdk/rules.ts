/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { rulesDeletev1RulesetsNamespaceSlug } from "../funcs/rulesDeletev1RulesetsNamespaceSlug.js";
import { rulesDeletev1RulesetsNamespaceSlugAccessGroup } from "../funcs/rulesDeletev1RulesetsNamespaceSlugAccessGroup.js";
import { rulesGetv1RulesetsNamespace } from "../funcs/rulesGetv1RulesetsNamespace.js";
import { rulesGetv1RulesetsNamespaceSlug } from "../funcs/rulesGetv1RulesetsNamespaceSlug.js";
import { rulesPatchv1RulesetsNamespaceSlug } from "../funcs/rulesPatchv1RulesetsNamespaceSlug.js";
import { rulesPostv1RulesetsNamespace } from "../funcs/rulesPostv1RulesetsNamespace.js";
import { rulesPostv1RulesetsNamespaceSlugAccessGroup } from "../funcs/rulesPostv1RulesetsNamespaceSlugAccessGroup.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Rules extends ClientSDK {
  /**
   * List all rules
   *
   * @remarks
   * Get a list of all rulesets for the namespace
   */
  async getv1RulesetsNamespace(
    request: operations.Getv1RulesetsNamespaceRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.Getv1RulesetsNamespaceResponseBody>> {
    return unwrapAsync(rulesGetv1RulesetsNamespace(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a rule
   *
   * @remarks
   * Create a new rule for the namespace
   */
  async postv1RulesetsNamespace(
    request: operations.Postv1RulesetsNamespaceRequest,
    options?: RequestOptions,
  ): Promise<operations.Postv1RulesetsNamespaceResponseBody> {
    return unwrapAsync(rulesPostv1RulesetsNamespace(
      this,
      request,
      options,
    ));
  }

  /**
   * Update rule metadata
   *
   * @remarks
   * Update rule metadata
   */
  async patchv1RulesetsNamespaceSlug(
    request: operations.Patchv1RulesetsNamespaceSlugRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(rulesPatchv1RulesetsNamespaceSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a rule
   *
   * @remarks
   * Delete a specific rule
   */
  async deletev1RulesetsNamespaceSlug(
    request: operations.Deletev1RulesetsNamespaceSlugRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(rulesDeletev1RulesetsNamespaceSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a rule
   *
   * @remarks
   * Get a the rule document
   */
  async getv1RulesetsNamespaceSlug(
    request: operations.Getv1RulesetsNamespaceSlugRequest,
    options?: RequestOptions,
  ): Promise<operations.Getv1RulesetsNamespaceSlugResponseBody> {
    return unwrapAsync(rulesGetv1RulesetsNamespaceSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Add rule access group
   *
   * @remarks
   * Add an access group for the rule
   */
  async postv1RulesetsNamespaceSlugAccessGroup(
    request: operations.Postv1RulesetsNamespaceSlugAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(rulesPostv1RulesetsNamespaceSlugAccessGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove rule access group
   *
   * @remarks
   * Delete an access group from rule
   */
  async deletev1RulesetsNamespaceSlugAccessGroup(
    request: operations.Deletev1RulesetsNamespaceSlugAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(rulesDeletev1RulesetsNamespaceSlugAccessGroup(
      this,
      request,
      options,
    ));
  }
}
