/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { schemasDeletev1SchemasNamespaceSlug } from "../funcs/schemasDeletev1SchemasNamespaceSlug.js";
import { schemasDeletev1SchemasNamespaceSlugAccessGroup } from "../funcs/schemasDeletev1SchemasNamespaceSlugAccessGroup.js";
import { schemasDeletev1SchemasNamespaceSlugVersionSemver } from "../funcs/schemasDeletev1SchemasNamespaceSlugVersionSemver.js";
import { schemasGetv1SchemasNamespace } from "../funcs/schemasGetv1SchemasNamespace.js";
import { schemasGetv1SchemasNamespaceSlugVersionSemver } from "../funcs/schemasGetv1SchemasNamespaceSlugVersionSemver.js";
import { schemasPatchv1SchemasNamespaceSlug } from "../funcs/schemasPatchv1SchemasNamespaceSlug.js";
import { schemasPostv1SchemasNamespace } from "../funcs/schemasPostv1SchemasNamespace.js";
import { schemasPostv1SchemasNamespaceSlugAccessGroup } from "../funcs/schemasPostv1SchemasNamespaceSlugAccessGroup.js";
import { schemasPostv1SchemasNamespaceSlugVersion } from "../funcs/schemasPostv1SchemasNamespaceSlugVersion.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Schemas extends ClientSDK {
  /**
   * List all shared components
   *
   * @remarks
   * Get a list of all schemas for the namespace
   */
  async getv1SchemasNamespace(
    request: operations.Getv1SchemasNamespaceRequest,
    options?: RequestOptions,
  ): Promise<Array<operations.Getv1SchemasNamespaceResponseBody>> {
    return unwrapAsync(schemasGetv1SchemasNamespace(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a shared component
   *
   * @remarks
   * Create a new schema for the namespace
   */
  async postv1SchemasNamespace(
    request: operations.Postv1SchemasNamespaceRequest,
    options?: RequestOptions,
  ): Promise<operations.Postv1SchemasNamespaceResponseBody> {
    return unwrapAsync(schemasPostv1SchemasNamespace(
      this,
      request,
      options,
    ));
  }

  /**
   * Update shared component metadata
   *
   * @remarks
   * Update schema metadata
   */
  async patchv1SchemasNamespaceSlug(
    request: operations.Patchv1SchemasNamespaceSlugRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(schemasPatchv1SchemasNamespaceSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a shared component
   *
   * @remarks
   * Delete a specific schema and all of the related versions
   */
  async deletev1SchemasNamespaceSlug(
    request: operations.Deletev1SchemasNamespaceSlugRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(schemasDeletev1SchemasNamespaceSlug(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a shared component document
   *
   * @remarks
   * Get a specific schema document
   */
  async getv1SchemasNamespaceSlugVersionSemver(
    request: operations.Getv1SchemasNamespaceSlugVersionSemverRequest,
    options?: RequestOptions,
  ): Promise<operations.Getv1SchemasNamespaceSlugVersionSemverResponseBody> {
    return unwrapAsync(schemasGetv1SchemasNamespaceSlugVersionSemver(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a shared component version
   *
   * @remarks
   * Delete a specific schema version
   */
  async deletev1SchemasNamespaceSlugVersionSemver(
    request: operations.Deletev1SchemasNamespaceSlugVersionSemverRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(schemasDeletev1SchemasNamespaceSlugVersionSemver(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a shared component version
   *
   * @remarks
   * Create a shared component version
   */
  async postv1SchemasNamespaceSlugVersion(
    request: operations.Postv1SchemasNamespaceSlugVersionRequest,
    options?: RequestOptions,
  ): Promise<operations.Postv1SchemasNamespaceSlugVersionResponseBody> {
    return unwrapAsync(schemasPostv1SchemasNamespaceSlugVersion(
      this,
      request,
      options,
    ));
  }

  /**
   * Add shared component access group
   *
   * @remarks
   * Add access group to schema
   */
  async postv1SchemasNamespaceSlugAccessGroup(
    request: operations.Postv1SchemasNamespaceSlugAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(schemasPostv1SchemasNamespaceSlugAccessGroup(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove shared component access group
   *
   * @remarks
   * Delete access group for schema
   */
  async deletev1SchemasNamespaceSlugAccessGroup(
    request: operations.Deletev1SchemasNamespaceSlugAccessGroupRequest,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(schemasDeletev1SchemasNamespaceSlugAccessGroup(
      this,
      request,
      options,
    ));
  }
}
